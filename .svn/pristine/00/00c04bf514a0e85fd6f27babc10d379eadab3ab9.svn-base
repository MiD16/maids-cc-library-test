package com.template.Controller.Table.Holiday;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.apache.logging.log4j.util.StringBuilderFormattable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.AllIndexes.Branch;
import com.template.Model.Table.Holiday.*;
import com.template.Service.Table.AllIndexes.BranchServices;
import com.template.Service.Table.Holiday.*;

@Controller
@RequestMapping("branchHoliday")
public class BranchHolidayController {

	@Value("${page.size}")
	int itemCountInPage;
	@Autowired
	BranchHolidayService branchHolidayService;
	@Autowired
	BranchServices branchServices;
	@Autowired
	HolidaysService holidaysService;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,@RequestParam(value = "holidayId", required = true) Long holidayId,
			@RequestParam(name = "fromHolidays", required = true) int fromHolidays,
			@RequestParam(name = "page", required = false) Integer page) {
		
		//fromHolidays: It is only used to organize display in jsp pages
		String result;
		CResponse response=new CResponse();
		if (page == null)
			page = 0;
		//Get the list of branches related to the holiday with ID holidayId
		response=branchHolidayService
				.findByHolidayId(PageRequest.of(page, itemCountInPage),holidayId);
		Page<BranchHoliday> branchHolidayList = (Page<BranchHoliday>) response.getReturnedObject();
		//Get a list of branches that were not previously added for the holiday
		List<Branch> branchList = branchServices
				.findBranchNotInBranchHoliday(holidayId);
		model.addAttribute("branchHolidayList", branchHolidayList.getContent());
		model.addAttribute("branchList",branchList);
		model.addAttribute("pageInfo", PageInfo.getPageInfo(branchHolidayList));
		model.addAttribute("holidayId", holidayId);
		model.addAttribute("fromHolidays",fromHolidays);
		response=holidaysService.findById(holidayId);	
		Holidays holidays= (Holidays) response.getReturnedObject();	
		model.addAttribute("holidays",holidays);
		result = "/branchHoliday/index";
		return result;
	}

	@GetMapping("/create")
	public String create(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response;
		BranchHoliday branchHoliday;
		if (id == null) {
			branchHoliday = new BranchHoliday();
		} else {
			response=branchHolidayService.findById(id);
			branchHoliday =(BranchHoliday) response.getReturnedObject();
		}
		model.addAttribute("branchHoliday", branchHoliday);
		result = "/branchHoliday/create";
		return result;
	}

	@PostMapping("/save")
	public String save(@Valid @ModelAttribute("branchHoliday") BranchHoliday branchHoliday, Model model,
			@RequestParam(name = "fromHolidays", required = true) int fromHolidays,
			final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=branchHolidayService.save(branchHoliday,Integer.parseInt(request.getParameter("branch")));
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		
		result = "redirect:/branchHoliday/index?holidayId="+branchHoliday.getHoliday().getId()+"&fromHolidays="+fromHolidays;
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			@RequestParam(name = "fromHolidays", required = true) int fromHolidays,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=branchHolidayService.delete(id);
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
	    BranchHoliday branchHoliday=(BranchHoliday)response.getReturnedObject();
		redirectAttributes.addFlashAttribute("success", "تم الحذف بنجاح");
		result = "redirect:/branchHoliday/index?holidayId="+branchHoliday.getHoliday().getId()+"&fromHolidays="+fromHolidays;
		return result;
	}
}
