


package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;
import com.template.Repository.Table.AllIndexes.IndCustDocumentRepository;


@Service
public class IndCustDocumentServices {


	@Autowired
	IndCustDocumentRepository indCustDocumentRepository;
	/////////////////////////
	

@Autowired CActionHandler actionHandler;
	
	public CResponse createIndCustDocument(IndCustDocument indCustDocument) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Customer_Document.toString(), indCustDocument);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Customer_Document, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCustDocument.setInsertBy(0);
			indCustDocument.setIsDeleted(0);
			indCustDocument.setInsertDate(new Date());
			indCustDocumentRepository.save(indCustDocument);
			
			response.setReturnedObject(indCustDocument);
		}
		while(false);
		
		return response;
	}
	
	public IndCustDocument updateIndCustDocument (IndCustDocument indCustDocument) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCustDocument.getId() == null) 
		{
			
			indCustDocument.setInsertBy(0);
		}
		
		
		
		else if(indCustDocument.getId() != null)
		{
			IndCustDocument temSocialStatus = indCustDocumentRepository.findById(indCustDocument.getId()).get();
			indCustDocument.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCustDocumentRepository.save(indCustDocument);
		return indCustDocument;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndCustDocument findByNames(String nameA, String nameB) {
		return indCustDocumentRepository.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public IndCustDocument save(IndCustDocument indCustDocument) {
		if(indCustDocument.getId() == null)
		{
			indCustDocument.setInsertBy(0);
			indCustDocument.setInsertDate(getCurrentDate());
			indCustDocument.setIsDeleted(0);
		}else if(indCustDocument.getId() != null){
			System.err.println(2121);
			indCustDocument.setInsertDate(getCurrentDate());
			indCustDocument.setLastUpdateDate(getCurrentDate());
			indCustDocument.setLastUpdateBy(1);
		}
		indCustDocumentRepository.save(indCustDocument);
		return indCustDocument;
	}
	
	public void update(IndCustDocument indCustDocument) {
		indCustDocumentRepository.save(indCustDocument);
	}
	
	public IndCustDocument findById(Long id) {
		return indCustDocumentRepository.getById(id);
	}
	
	public List<IndCustDocument> getAll(){
		List<IndCustDocument> all = indCustDocumentRepository.getAll();
		return all;
	}
	
	public List<IndCustDocument> getAllDeleted(){
		List<IndCustDocument> allDeleted = indCustDocumentRepository.getAllDeleted();
		return allDeleted;
	}

	public IndCustDocument delete(Long id) {
		IndCustDocument indCustDocument = indCustDocumentRepository.findById(id).get();
		if (indCustDocument == null) {
			throw new NoDataFoundException("indCustDocument With ID : " + id + " Not Found");
		}
		indCustDocument.setIsDeleted(1);
		return indCustDocumentRepository.save(indCustDocument);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}}
