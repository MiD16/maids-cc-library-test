package com.template.Controller.Basic;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Basic.User;
import com.template.Model.Basic.UserRole;
import com.template.Model.View.UserRoleOpposite;
//import com.template.Service.Basic.LogService;
import com.template.Service.Basic.RoleService;
import com.template.Service.Basic.UserActionService;
import com.template.Service.Basic.UserRoleService;
import com.template.Service.Basic.UserService;

@Controller
@ControllerAdvice(assignableTypes = { UserRoleController.class })
@RequestMapping("UserRole")
public class UserRoleController {
//	@Autowired
//	public LogService logActionService;
	@Autowired
	RoleService roleService;
	@Autowired
	UserService userService;
	@Autowired
	UserRoleService userRoleService;
	@Autowired
	UserActionService userActionService;

	@Value("${page.size}")
	int itemCountInPage;

	@GetMapping("/index")
	public String index(@RequestParam(value = "id") int id, Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		CResponse response = null;
		List<UserRoleOpposite> userRoleOppositeList = null;
		Page<UserRole> userrolePage = null;
		User user = null;
		String result;
		if (page == null)
			page = 0;
		response = new CResponse();
		response = userRoleService.getUserRoleByUserId(id, PageRequest.of(page, itemCountInPage));
		userrolePage = (Page<UserRole>) response.getReturnedObject();
		response = userRoleService.findUserRoleOppositeByRoleId(id);
		userRoleOppositeList = (List<UserRoleOpposite>) response.getReturnedObject();
		model.addAttribute("userRoleOppositeList", userRoleOppositeList);
		response = new CResponse();
		response = userService.getUserByID(id);
		user = (User) response.getReturnedObject();
		model.addAttribute("user", user);
		model.addAttribute("userroleList", userrolePage.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(userrolePage));
		result = "/user/userrole-index";

		return result;
	}

	@PostMapping("/create")
	public String create(@RequestParam(value = "user_id") int user_id, @RequestParam(value = "role_id") int role_id,
			Model model, final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = new CResponse();
		result = "redirect:/UserRole/index?id=" + user_id;
		response = userRoleService.create(user_id, role_id);
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (!response.isSuccess()) {
			responseDTO.setErrorMessage(response.getErrorMessage());
		} else {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
			result = "redirect:/UserRole/index?id=" + user_id;
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		return result;

	}

	@GetMapping("/delete")
	public String deleteRoleFromUser(@RequestParam(value = "id") int id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		UserRole userrole=null;
		response = userRoleService.delete(id);
		userrole = (UserRole) response.getReturnedObject();
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		result = "redirect:/UserRole/index?id=" + userrole.getUser().getID();
		if (!response.isSuccess()) {
			responseDTO.setErrorMessage(response.getErrorMessage());

		} else {
			responseDTO.setSuccessMessage(response.getSuccessMessage());

		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		return result;
	}

	@ModelAttribute("title")
	public String pageTitle() {
		return "أدوار المستخدم";
	}
}
