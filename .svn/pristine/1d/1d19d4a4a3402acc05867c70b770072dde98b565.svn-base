package com.template.Service.Table.AllIndexes;


import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndCountry;
import com.template.Model.Table.AllIndexes.IndCustDocument;
import com.template.Repository.Table.AllIndexes.IndCountryRepository;

@Service
public class IndCountryServices {
	
	@Autowired
	IndCountryRepository indCountryRepository;
	
	
	

@Autowired CActionHandler actionHandler;
	
	public CResponse createIndCountry(IndCountry indCountry) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Commission_Type.toString(), indCountry);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Commission_Type, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCountry.setInsertBy(0);
			indCountry.setIsDeleted(0);
			indCountry.setInsertDate(new Date());
			indCountryRepository.save(indCountry);
			
			response.setReturnedObject(indCountry);
		}
		while(false);
		
		return response;
	}
	
	public IndCountry updateIndCustDocument (IndCountry indCountry) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCountry.getId() == null) 
		{
			
			indCountry.setInsertBy(0);
		}
		
		
		
		else if(indCountry.getId() != null)
		{
			IndCountry temSocialStatus = indCountryRepository.findById(indCountry.getId()).get();
			indCountry.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCountryRepository.save(indCountry);
		return indCountry;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndCountry findByNames(String nameA, String nameB) {
		return indCountryRepository.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public IndCountry save(IndCountry indCountry) {
		if(indCountry.getId() == null) {
			indCountry.setInsertBy(0);
		}
	else if(indCountry.getId() != null){
			IndCountry temCountry = indCountryRepository.findById(indCountry.getId()).get();
			indCountry.setInsertDate(temCountry.getInsertDate());
		}
		indCountryRepository.save(indCountry);
		return indCountry;
	}
	
	public void update(IndCountry indCountry) {
		indCountryRepository.save(indCountry);
	}
	
	public IndCountry findById(Long id) {
		return indCountryRepository.getById(id);
	}
	
	public List<IndCountry> getAll(){
		List<IndCountry> all = indCountryRepository.getAll();
		return all;
	}
	
	public List<IndCountry> getAllDeleted(){
		List<IndCountry> allDeleted = indCountryRepository.getAllDeleted();
		return allDeleted;
	}

	public IndCountry delete(Long id) {
		IndCountry indCountry = indCountryRepository.findById(id).get();
		if (indCountry == null) {
			throw new NoDataFoundException("indCountry With ID : " + id + " Not Found");
		}
		indCountry.setIsDeleted(1);
		return indCountryRepository.save(indCountry);
	}

}
