package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndInstitution;
import com.template.Model.Table.AllIndexes.IndJournalStatus;
import com.template.Repository.Table.AllIndexes.IndInstitutionRepository;
import com.template.Repository.Table.AllIndexes.IndJournalStatusRepository;

@Service
public class IndInstitutionServices {
	
	

@Autowired
IndInstitutionRepository indInstitutionRepository;
@Autowired CActionHandler actionHandler;


public CResponse createIndJournalStatus(IndInstitution indInstitution) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	do
	{
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		
		actionValidationParameters.addParameter(EKeyCode.IND_JOURNAL_STATUS.toString(), indInstitution);
		
		actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_JOURNAL_STATUS, actionValidationParameters);
		
		if(!actionValidationResult.isValid())
		{
			response.setSuccess(false);
			response.setErrorMessage(actionValidationResult.getErrorMessage());
			break;
		}
		
		indInstitution.setInsertBy(0);
		indInstitution.setInsertDate(new Date());
		indInstitutionRepository.save(indInstitution);
		
		response.setReturnedObject(indInstitution);
	}
	while(false);
	
	return response;
}

public IndInstitution updateIndJournalStatus(IndInstitution indInstitution) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	response = new CResponse();
	actionValidationParameters = new CActionValidationParameters();
	actionValidationResult = new CActionValidationResult();
	
	if(indInstitution.getId() == null) 
	{
		
		indInstitution.setInsertBy(0);
	}
	
	
	
	else if(indInstitution.getId() != null)
	{
		IndInstitution temSocialStatus = indInstitutionRepository.findById(indInstitution.getId()).get();
		indInstitution.setInsertDate(temSocialStatus.getInsertDate());
	}
	indInstitutionRepository.save(indInstitution);
	return indInstitution;
}





public IndInstitution findByNames(String nameA, String nameB) {
	return indInstitutionRepository.findByNames(nameA, nameB);
}

public IndInstitution save(IndInstitution indInstitution) {
	if(indInstitution.getId() == null)
	{
		indInstitution.setInsertBy(0);
	}else if(indInstitution.getId() != null){
		IndInstitution temSignatureType=indInstitutionRepository.findById(indInstitution.getId()).get();
		indInstitution.setInsertDate(temSignatureType.getInsertDate());
	}
	indInstitutionRepository.save(indInstitution);
	return indInstitution;
}


public void update(IndInstitution indInstitution) {
	indInstitutionRepository.save(indInstitution);
}

public IndInstitution findById(Long id) {
	return indInstitutionRepository.getById(id);
}

public List<IndInstitution> getAll(){
	List<IndInstitution> all = indInstitutionRepository.getAll();
	return all;
}

public List<IndInstitution> getAllDeleted(){
	List<IndInstitution> allDeleted = indInstitutionRepository.getAllDeleted();
	return allDeleted;
}

public IndInstitution delete(Long id) {
	IndInstitution indInstitution = indInstitutionRepository.findById(id).get();
	if (indInstitution == null) {
		throw new NoDataFoundException("indSignatureType With ID : " + id + " Not Found");
	}
	indInstitution.setIsDeleted(1);
	return indInstitutionRepository.save(indInstitution);



}

public boolean checkIndInstitutionIsDeleted(long id) {
	IndInstitution indInstitution= indInstitutionRepository.findById(id).get();
	if (indInstitution.getIsDeleted() == 1)
		return true;
	return false;
}


}
