package com.template.Service.Table.AllIndexes;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;

import com.template.Repository.Table.AllIndexes.IndAddressTypeRepository;
import com.template.Repository.Table.AllIndexes.IndFileTypeRepository;
import com.template.Repository.Table.AllIndexes.IndGenderRepository;
import com.template.Repository.Table.AllIndexes.IndIdTypeRepository;

import java.util.Date;
import java.util.List;
@Service
public class IndIdTypeServices {

@Autowired
IndIdTypeRepository indIdTypeRepository;

@Autowired CActionHandler actionHandler;

public CResponse createIndIdType(IndIdType indIdType) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	do
	{
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		
		actionValidationParameters.addParameter(EKeyCode.Ind_ID_Type.toString(), indIdType);
		
		actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_GENDER, actionValidationParameters);
		
		if(!actionValidationResult.isValid())
		{
			response.setSuccess(false);
			response.setErrorMessage(actionValidationResult.getErrorMessage());
			break;
		}
		
		indIdType.setInsertBy(0);
		indIdType.setIsDeleted(0);
		indIdType.setInsertDate(new Date());
		indIdTypeRepository.save(indIdType);
		
		response.setReturnedObject(indIdType);
	}
	while(false);
	
	return response;
}

public IndIdType updateSocialStatus(IndIdType indIdType) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	response = new CResponse();
	actionValidationParameters = new CActionValidationParameters();
	actionValidationResult = new CActionValidationResult();
	
	if(indIdType.getId() == null) 
	{
		
		indIdType.setInsertBy(0);
	}
	
	
	
	else if(indIdType.getId() != null)
	{
		IndIdType temSocialStatus = indIdTypeRepository.findById(indIdType.getId()).get();
		indIdType.setInsertDate(temSocialStatus.getInsertDate());
	}
	indIdTypeRepository.save(indIdType);
	return indIdType;




}




public IndIdType save(IndIdType indIdType) {
	if(indIdType.getId() == null)
	{
		indIdType.setInsertBy(0);
	}else if(indIdType.getId() != null){
		IndIdType temSignatureType=indIdTypeRepository.findById(indIdType.getId()).get();
		indIdType.setInsertDate(temSignatureType.getInsertDate());
	}
	indIdTypeRepository.save(indIdType);
	return indIdType;
}








public IndIdType findByNames(String nameA, String nameB) {
	return indIdTypeRepository.findByNames(nameA, nameB);
}



public IndIdType findById(Long id) {
	return indIdTypeRepository.getById(id);
}

public List<IndIdType> getAll(){
	List<IndIdType> all = indIdTypeRepository.getAll();
	return all;
}

public List<IndIdType> getAllDeleted(){
	List<IndIdType> allDeleted = indIdTypeRepository.getAllDeleted();
	return allDeleted;
}

public IndIdType delete(Long id) {
	IndIdType indIdType = indIdTypeRepository.findById(id).get();
	if (indIdType == null) {
		throw new NoDataFoundException("indSocialStatus With ID : " + id + " Not Found");
	}
	indIdType.setIsDeleted(1);
	return indIdTypeRepository.save(indIdType);
}

private static java.sql.Date getCurrentDate() {
	java.util.Date today = new java.util.Date();
	return new java.sql.Date(today.getTime());
}
}


