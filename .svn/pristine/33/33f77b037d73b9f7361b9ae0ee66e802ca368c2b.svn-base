package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;

import com.template.Repository.Table.AllIndexes.IndBlacklistDocStatusRepository;
import com.template.Repository.Table.AllIndexes.IndCertificateTypeRepositry;
import com.template.Repository.Table.AllIndexes.IndCityRepositry;
import com.template.Repository.Table.AllIndexes.IndSocialStatusRepository;

@Service
public class IndCertificateTypeServices {


	@Autowired
	IndCertificateTypeRepositry indCertificateTypeRepositry;
	

@Autowired CActionHandler actionHandler;
	
	public CResponse createIndCertificateType(IndCertificateType indCertificateType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Certificate_Type.toString(), indCertificateType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Certificate_Type, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCertificateType.setInsertBy(0);
			indCertificateType.setIsDeleted(0);
			indCertificateType.setInsertDate(new Date());
			indCertificateTypeRepositry.save(indCertificateType);
			
			response.setReturnedObject(indCertificateType);
		}
		while(false);
		
		return response;
	}
	
	public IndCertificateType updateIndCertificateType(IndCertificateType indCertificateType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCertificateType.getId() == null) 
		{
			
			indCertificateType.setInsertBy(0);
		}
		
		
		
		else if(indCertificateType.getId() != null)
		{
			IndCertificateType temSocialStatus = indCertificateTypeRepositry.findById(indCertificateType.getId()).get();
			indCertificateType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCertificateTypeRepositry.save(indCertificateType);
		return indCertificateType;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndCertificateType findByNames(String nameA, String nameB) {
		return indCertificateTypeRepositry.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	public IndCertificateType save(IndCertificateType indCertificateType) {
		if(indCertificateType.getId() == null) {
			indCertificateType.setInsertBy(0);
		}
	else if(indCertificateType.getId() != null){
		IndCertificateType temSocialStatus = indCertificateTypeRepositry.findById(indCertificateType.getId()).get();
		indCertificateType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCertificateTypeRepositry.save(indCertificateType);
		return indCertificateType;
	}
	
	public void update(IndCertificateType indCertificateType) {
		indCertificateTypeRepositry.save(indCertificateType);
	}
	
	public IndCertificateType findById(Long id) {
		return indCertificateTypeRepositry.getById(id);
	}
	
	public List<IndCertificateType> getAll(){
		List<IndCertificateType> all = indCertificateTypeRepositry.getAll();
		return all;
	}
	
	public List<IndCertificateType> getAllDeleted(){
		List<IndCertificateType> allDeleted = indCertificateTypeRepositry.getAllDeleted();
		return allDeleted;
	}

	public IndCertificateType delete(Long id) {
		IndCertificateType indCertificateType = indCertificateTypeRepositry.findById(id).get();
		if (indCertificateType == null) {
			throw new NoDataFoundException("indSocialStatus With ID : " + id + " Not Found");
		}
		indCertificateType.setIsDeleted(1);
		return indCertificateTypeRepositry.save(indCertificateType);
	}
}