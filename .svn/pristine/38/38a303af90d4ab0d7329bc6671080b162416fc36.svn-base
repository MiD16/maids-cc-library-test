package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;

import com.template.Repository.Table.AllIndexes.IndFamilyMemberTypeRepository;
import com.template.Repository.Table.AllIndexes.IndSignatureTypeRepository;
@Service
public class IndFamilyMemberTypeServices {
	
	@Autowired
	IndFamilyMemberTypeRepository indFamilyMemberTypeRepository;
@Autowired CActionHandler actionHandler;
	
	public CResponse createIndSignatureType(IndFamilyMemberType indFamilyMemberType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.IND_SIGNATURE_TYPE.toString(), indFamilyMemberType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_SIGNATURE_TYPE, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indFamilyMemberType.setInsertBy(0);
			indFamilyMemberType.setIsDeleted(0);
			indFamilyMemberType.setInsertDate(new Date());
			indFamilyMemberTypeRepository.save(indFamilyMemberType);
			
			response.setReturnedObject(indFamilyMemberType);
		}
		while(false);
		
		return response;
	}
	
	public IndFamilyMemberType updateSocialStatus(IndFamilyMemberType indFamilyMemberType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indFamilyMemberType.getId() == null) 
		{
			
			indFamilyMemberType.setInsertBy(0);
		}
		
		
		
		else if(indFamilyMemberType.getId() != null)
		{
			IndFamilyMemberType temSocialStatus = indFamilyMemberTypeRepository.findById(indFamilyMemberType.getId()).get();
			indFamilyMemberType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indFamilyMemberTypeRepository.save(indFamilyMemberType);
		return indFamilyMemberType;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndFamilyMemberType findByNames(String nameA, String nameB) {
		return indFamilyMemberTypeRepository.findByNames(nameA, nameB);
	}
	


	public IndFamilyMemberType save(IndFamilyMemberType indFamilyMemberType) {
		if(indFamilyMemberType.getId() == null)
		{
			indFamilyMemberType.setInsertBy(0);
		}else if(indFamilyMemberType.getId() != null){
			IndFamilyMemberType temSignatureType=indFamilyMemberTypeRepository.findById(indFamilyMemberType.getId()).get();
			indFamilyMemberType.setInsertDate(temSignatureType.getInsertDate());
		}
		indFamilyMemberTypeRepository.save(indFamilyMemberType);
		return indFamilyMemberType;
	}

	
	public IndFamilyMemberType findById(Long id) {
		return indFamilyMemberTypeRepository.getById(id);
	}
	
	public List<IndFamilyMemberType> getAll(){
		List<IndFamilyMemberType> all = indFamilyMemberTypeRepository.getAll();
		return all;
	}
	
	public List<IndFamilyMemberType> getAllDeleted(){
		List<IndFamilyMemberType> allDeleted = indFamilyMemberTypeRepository.getAllDeleted();
		return allDeleted;
	}

	public IndFamilyMemberType delete(Long id) {
		IndFamilyMemberType indFamilyMemberType = indFamilyMemberTypeRepository.findById(id).get();
		if (indFamilyMemberType == null) {
			throw new NoDataFoundException("indSocialStatus With ID : " + id + " Not Found");
		}
		indFamilyMemberType.setIsDeleted(1);
		return indFamilyMemberTypeRepository.save(indFamilyMemberType);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}
	
	
	

}
