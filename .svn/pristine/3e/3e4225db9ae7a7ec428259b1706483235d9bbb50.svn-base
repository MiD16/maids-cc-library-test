package com.template.Controller.Basic;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;

import com.template.Model.Basic.Action;
import com.template.Model.Basic.User;
import com.template.Service.Basic.ActionService;

import com.template.Service.Basic.RoleActionService;
import com.template.Service.Table.AllIndexes.IndCatigoryModuleService;
import com.template.Service.Table.AllIndexes.IndCreditDebitCatigoryService;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import com.template.Model.Table.AllIndexes.IndCatigoryModule;
import com.template.Model.Table.AllIndexes.IndCreditDebitCatigory;

@Controller
@ControllerAdvice(assignableTypes = { ActionController.class })
@RequestMapping("action")
public class ActionController {



	@Autowired
	public IndCreditDebitCatigoryService indCreditDebitCatigoryService;

	@Autowired
	public IndCatigoryModuleService indCatigoryModuleService;
	@Autowired
	ActionService actionService;
	@Autowired
	RoleActionService roleActionService;
	@Value("${page.size}")
	int itemCountInPage;

	// Action Section
	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result = null;
		Page<Action> actionPage = null;
		if (page == null)
			page = 0;
		CResponse response = new CResponse();
		response = actionService.findAllAsPage(PageRequest.of(page, itemCountInPage));
		actionPage = (Page<Action>) response.getReturnedObject();
		model.addAttribute("actionList", actionPage.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(actionPage));
		result = "/role/action/index";
		return result;
	}

//	@PreAuthorize("hasPermission('action', 'edit')")
	@GetMapping("/edit")
	public String actionEdit(@RequestParam(value = "id") int id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result = null;
		Action action = null;
		List<IndCreditDebitCatigory> indCreditDebitCatigories = null;
		List<IndCatigoryModule> indCatigoryModules = null;
		CResponse response = new CResponse();
		response = actionService.findActionById(id);
		action = (Action) response.getReturnedObject();
		indCreditDebitCatigories = indCreditDebitCatigoryService.findAll();
		indCatigoryModules = indCatigoryModuleService.findAll();
		model.addAttribute("indCreditDebitCatigories", indCreditDebitCatigories);
		model.addAttribute("indCatigoryModules", indCatigoryModules);
		model.addAttribute("action", action);
		result = "/role/action/edit";
		return result;
	}

	@GetMapping("/details")
	public String actiondetails(@RequestParam(value = "id") int id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result = null;
		Action action = null;
		List<IndCreditDebitCatigory> indCreditDebitCatigories = null;
		List<IndCatigoryModule> indCatigoryModules = null;
		CResponse response = new CResponse();
		response = actionService.findActionById(id);
		action = (Action) response.getReturnedObject();
		indCreditDebitCatigories = indCreditDebitCatigoryService.findAll();
		indCatigoryModules = indCatigoryModuleService.findAll();
		model.addAttribute("indCreditDebitCatigories", indCreditDebitCatigories);
		model.addAttribute("indCatigoryModules", indCatigoryModules);
		model.addAttribute("action", action);
		result = "/role/action/details";
		return result;
	}

	// @PreAuthorize("hasPermission('action', 'edit')")
	@PostMapping("/edit")
	public String actionEditSave(@Valid @ModelAttribute("action") Action action, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result=null;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = new CResponse();
		result = "redirect:/user/create";
		response = actionService.updateAction(action);
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (!response.isSuccess()) {
			responseDTO.setErrorMessage(response.getErrorMessage());
			result = "redirect:/action/edit?id=" + action.getID();
		} else {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
			result = "redirect:/action/index";
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		return result;
	}

	@ModelAttribute("title")
	public String pageTitle() {
		return "الصلاحيات";
	}

}
