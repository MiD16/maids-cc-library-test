package com.template.Service.Table.AllIndexes;


import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CResponse;
import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndCustomerNature;
import com.template.Model.Table.AllIndexes.IndFileType;
import com.template.Model.Table.AllIndexes.IndCustomerType;
import com.template.Repository.Table.AllIndexes.IndCustomerNatureRepository;

@Service
public class IndCustomerNatureServices {
	
	@Autowired
	IndCustomerNatureRepository indCustomerNatureRepository;
	

	@Autowired CActionHandler actionHandler;
	
	public CResponse createIndCustomerNature(IndCustomerNature indCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Customer_Nature.toString(), indCustomerNature);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Customer_Nature, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCustomerNature.setInsertBy(0);
			indCustomerNature.setIsDeleted(0);
			indCustomerNature.setInsertDate(new Date());
			indCustomerNatureRepository.save(indCustomerNature);
			
			response.setReturnedObject(indCustomerNature);
		}
		while(false);
		
		return response;
	}
	
	public IndCustomerNature updateIndCustomerNature(IndCustomerNature indCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCustomerNature.getId() == null) 
		{
			
			indCustomerNature.setInsertBy(0);
		}
		
		
		
		else if(indCustomerNature.getId() != null)
		{
			IndCustomerNature temSocialStatus = indCustomerNatureRepository.findById(indCustomerNature.getId()).get();
			indCustomerNature.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCustomerNatureRepository.save(indCustomerNature);
		return indCustomerNature;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndCustomerNature findByNames(String nameA, String nameB) {
		return indCustomerNatureRepository.findByNames(nameA, nameB);
	}
	


	public IndCustomerNature save(IndCustomerNature indCustomerNature) {
		if(indCustomerNature.getId() == null)
		{
			indCustomerNature.setInsertBy(0);
		}else if(indCustomerNature.getId() != null){
			IndCustomerNature temSignatureType=indCustomerNatureRepository.findById(indCustomerNature.getId()).get();
			indCustomerNature.setInsertDate(temSignatureType.getInsertDate());
		}
		indCustomerNatureRepository.save(indCustomerNature);
		return indCustomerNature;
	}
	
	public IndCustomerNature findById(Long id) {
		return indCustomerNatureRepository.findById(id).get();
	}
	
	public CResponse getAll(){
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(indCustomerNatureRepository.getAll());
		return response;
	}
	
	
	public CResponse getAllByType(String name){
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(indCustomerNatureRepository.getAllByType(name));
		return response;
	}
	
	public List<IndCustomerNature> getAllDeleted(){
		List<IndCustomerNature> allDeleted = indCustomerNatureRepository.getAllDeleted();
		return allDeleted;
	}

	public IndCustomerNature delete(Long id) {
		IndCustomerNature indNationality = indCustomerNatureRepository.findById(id).get();
		if (indNationality == null) {
			throw new NoDataFoundException("indNationality With ID : " + id + " Not Found");
		}
		indNationality.setIsDeleted(1);
		return indCustomerNatureRepository.save(indNationality);
	}

	public boolean checkCustomerNatureIsDeleted(Long id) {
		IndCustomerNature indCustomerNature = indCustomerNatureRepository.findById(id).get();
		if(indCustomerNature.getIsDeleted() == 1)
			return true;
		return false;
	}

}
