package com.template.Controller.Basic;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Basic.User;
import com.template.Model.Basic.UserAction;
import com.template.Model.Basic.UserRole;
import com.template.Model.View.UserActionOpposite;
import com.template.Model.View.UserRoleOpposite;
import com.template.Service.Basic.ActionService;
//import com.template.Service.Basic.LogService;
import com.template.Service.Basic.RoleService;
import com.template.Service.Basic.UserActionService;
import com.template.Service.Basic.UserRoleService;
import com.template.Service.Basic.UserService;

@Controller
@ControllerAdvice(assignableTypes = { UserActionController.class })
@RequestMapping("UserAction")
public class UserActionController {

//	@Autowired
//	public LogService logActionService;
	@Autowired
	ActionService actionService;
	@Autowired
	UserService userService;
	@Autowired
	UserActionService userActionService;
	@Value("${page.size}")
	int itemCountInPage;
	
	@GetMapping("/index")
	public String index(@RequestParam(value = "id") int id, Model model, final RedirectAttributes redirectAttributes,@RequestParam(name = "page", required = false) Integer page) {

		String result;
		if(page == null)
			page=0;
		CResponse response = new CResponse();
		response =userActionService.getUserActionByUserId(id,PageRequest.of(page,itemCountInPage));
		Page<UserAction> useractionPage = (Page<UserAction>) response.getReturnedObject();
		
		response =userActionService.findUserActionOppositeByRoleId(id);
		List<UserActionOpposite> userActionOppositeList = (List<UserActionOpposite>) response.getReturnedObject();
	
		response= userService.getUserByID(id);
		User user=(User) response.getReturnedObject();
		
		model.addAttribute("user",user);
		model.addAttribute("useractionList", useractionPage.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(useractionPage));
		model.addAttribute("userActionOppositeList", userActionOppositeList);
		result = "/user/useraction-index";
		return result;
	}
	@PostMapping("/create")
	public String create(@RequestParam(value = "user_id") int user_id, @RequestParam(value = "action_id") int action_id,
			Model model, final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = new CResponse();



		
			response = userActionService.create(user_id, action_id,null );
			responseDTO = new CResponseDTO();
			responseDTO.setSuccess(response.isSuccess());
			if (!response.isSuccess()) {

				responseDTO.setErrorMessage(response.getErrorMessage());

			} else {

				responseDTO.setSuccessMessage(response.getSuccessMessage());
			
			}
			result = "redirect:/UserAction/index?id=" + user_id;
			redirectAttributes.addFlashAttribute("response", responseDTO);
			return result;
		

	}

	@GetMapping("/delete")
	public String deleteActionFromRole(@RequestParam(value = "id") int id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = new CResponse();



		
			response =	userActionService.delete(id);
			
			responseDTO = new CResponseDTO();
			responseDTO.setSuccess(response.isSuccess());
			if (!response.isSuccess()) {

				responseDTO.setErrorMessage(response.getErrorMessage());

			} else {

				responseDTO.setSuccessMessage(response.getSuccessMessage());
			
			}
			result = "redirect:/UserAction/index?id=" + ((UserAction)response.getReturnedObject()).getUser().getID();
			redirectAttributes.addFlashAttribute("response", responseDTO);
			return result;
		

	}

	@ModelAttribute("title")
	public String pageTitle() {
		return "صلاحيات  المستخدم";
	}
}
