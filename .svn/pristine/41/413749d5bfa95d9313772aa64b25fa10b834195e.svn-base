package com.template.Service.Table.Product;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EErrorCode;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.AccIndDateUnit;
import com.template.Model.Table.AllIndexes.AccIndInterestType;
import com.template.Model.Table.Holiday.IndHolidays;
import com.template.Model.Table.Interests.AccInterest;
import com.template.Model.Table.Products.AccCurrency;
import com.template.Model.Table.Products.AccPeriod;
import com.template.Repository.Table.Product.AccPeriodRepository;
import com.template.Service.Basic.UserService;
import com.template.Service.Table.AllIndexes.AccIndDateUnitService;

@Service
public class AccPeriodService {

	@Autowired
	AccPeriodRepository accPeriodRepository;

	@Autowired
	AccIndDateUnitService dateUnitService;

	@Autowired
	CActionHandler actionHandler;

	@Autowired
	UserService userService;

	public AccPeriod save(AccPeriod accPeriod) {
		if (accPeriod.getId() == null) {
			accPeriod.setInsertBy(0);
		} else if (accPeriod.getId() != null) {
			AccPeriod temCompany = accPeriodRepository.findById(accPeriod.getId()).get();
			accPeriod.setInsertDate(temCompany.getInsertDate());
		}
		accPeriodRepository.save(accPeriod);
		return accPeriod;
	}

	// create period
	public CResponse saveCreate(AccPeriod accPeriod, String path) throws Exception {
		CResponse response = null;
		CResponse responseDateUnit = null;
		responseDateUnit=dateUnitService.findById(accPeriod.getDateUnitId().getId());
		AccIndDateUnit dateUnit = (AccIndDateUnit)responseDateUnit.getReturnedObject();
		// call validate for create object
		response = validatePeriodCreate(accPeriod, dateUnit, path);
		if (response.isSuccess() == false) {
			return response;
		}
		accPeriod.setInsertBy(userService.getAuthenticatedUser().getID());
		accPeriodRepository.save(accPeriod);
		response.setSuccessMessage("تم الإضافة بنجاح");
		return response;
	}

	// update period
	public CResponse saveUpdate(AccPeriod accPeriod, String path) throws Exception {
		CResponse response = null;
		CResponse responseDateUnit = null;
		responseDateUnit=dateUnitService.findById(accPeriod.getDateUnitId().getId());
		AccIndDateUnit dateUnit = (AccIndDateUnit)responseDateUnit.getReturnedObject();
		// call validate for update object
		response = validatePeriodUpdate(accPeriod, dateUnit, path);
		if (response.isSuccess() == false) {
			return response;
		}
		// to get insert date from object in database
		AccPeriod tem = accPeriodRepository.findById(accPeriod.getId()).get();
		accPeriod.setInsertDate(tem.getInsertDate());
		accPeriod.setInsertBy(tem.getInsertBy());
		// set user that updated
		accPeriod.setLastUpdateBy(userService.getAuthenticatedUser().getID());
		accPeriodRepository.save(accPeriod);
		response.setSuccessMessage("تم التعديل بنجاح");
		return response;
	}

	public void update(AccPeriod accPeriod) {
		accPeriodRepository.save(accPeriod);
	}

	public CResponse findById(Long id) {
		CResponse response = null;
		response = new CResponse();
		response.setReturnedObject(accPeriodRepository.findById(id).get());
		return response;
	}

	public CResponse getAll(PageRequest pageRequest) {
		CResponse response = null;
		response = new CResponse();
		response.setReturnedObject(accPeriodRepository.getAll(pageRequest));
		return response;
	}
	public CResponse getAll() {
		CResponse response = null;
		response = new CResponse();
		response.setReturnedObject(accPeriodRepository.getAll());
		return response;
	}

	public List<AccPeriod> getAllDeleted() {
		List<AccPeriod> allDeleted = accPeriodRepository.getAllDeleted();
		return allDeleted;
	}

	// delete interest
	public CResponse delete(Long id) throws Exception {
		AccPeriod period = accPeriodRepository.findById(id).get();
		CResponse response = null;
		// call validate for delete object
		response = validatePeriodDelete(period);
		if (response.isSuccess() == false) {
			return response;
		}
		// soft delete
		period.setIsDeleted(1);
		// set deleted date
		period.setDeletedDate(new Date());
		// set user that deleted
		period.setDeletedBy(userService.getAuthenticatedUser().getID());
		response.setSuccessMessage("تم الحذف بنجاح");
		response.setReturnedObject(accPeriodRepository.save(period));
		return response;
	}

	// check if period is deleted
	// return true if deleted
	// return false if not deleted
	public boolean checkPeriodIsDeleted(long id) {
		AccPeriod period = accPeriodRepository.findById(id).get();
		if (period.getIsDeleted() == 1)
			return true;
		return false;
	}

	// check if period is exist
	// return id if exist
	// return null if not exist
	public Long checkPeriodIsExist(AccPeriod period) {
		AccPeriod accPeriodFromDB = accPeriodRepository.getPeriodByDateUnitAndValue(period.getDateUnitId().getId(),
				period.getAccPeriodValue());
		if (accPeriodFromDB != null) {
			if (period.getId() == null || (period.getId() != null && !period.getId().equals(accPeriodFromDB.getId()))) {
				return accPeriodFromDB.getId();
			}
		}
		return null;
	}

	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}

	// validate if can create period
	public CResponse validatePeriodCreate(AccPeriod period, AccIndDateUnit dateUnit, String path) throws Exception {
		CActionValidationParameters parameters = null;
		CActionValidationResult actionValidationResult = null;
		CResponse response = null;
		try {
			do {
				response = new CResponse();
				// check if The period exists
				if (period == null) {
					response.setSuccess(false);
					response.setErrorCode(EErrorCode.PERIOD_NOT_FOUND.toString());
					response.setErrorMessage("الفترة غير موجودة");
					break;
				}
				// check if The date unit exists
				if (dateUnit == null) {
					response.setSuccess(false);
					response.setErrorCode(EErrorCode.Acc_Ind_Date_Unit_NOT_FOUND.toString());
					response.setErrorMessage("وحدة التاريخ غير موجودة");
					break;
				}
				// set parameters
				parameters = new CActionValidationParameters();
				parameters.addParameter(EKeyCode.PERIOD.toString(), period);
				parameters.addParameter(EKeyCode.Acc_Ind_Date_Unit.toString(), dateUnit);
				parameters.addParameter(EKeyCode.PATH.toString(), path);
				actionValidationResult = actionHandler.validate(CActionConstant.CREATE_PERIOD, parameters);
				response.setSuccess(actionValidationResult.isValid());
				response.setErrorCode(actionValidationResult.getErrorCode());
				response.setErrorMessage(actionValidationResult.getErrorMessage());
			} while (false);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return response;
	}

	// validate if can update period
	public CResponse validatePeriodUpdate(AccPeriod period, AccIndDateUnit dateUnit, String path) throws Exception {
		CActionValidationParameters parameters = null;
		CActionValidationResult actionValidationResult = null;
		CResponse response = null;
		try {
			do {
				response = new CResponse();
				// check if The period exists
				if (period == null) {
					response.setSuccess(false);
					response.setErrorCode(EErrorCode.PERIOD_NOT_FOUND.toString());
					response.setErrorMessage("الفترة غير موجودة");
					break;
				}
				// check if The date unit exists
				if (dateUnit == null) {
					response.setSuccess(false);
					response.setErrorCode(EErrorCode.Acc_Ind_Date_Unit_NOT_FOUND.toString());
					response.setErrorMessage("وحدة التاريخ غير موجودة");
					break;
				}
				// set parameters
				parameters = new CActionValidationParameters();
				parameters.addParameter(EKeyCode.PERIOD.toString(), period);
				parameters.addParameter(EKeyCode.Acc_Ind_Date_Unit.toString(), dateUnit);
				parameters.addParameter(EKeyCode.PATH.toString(), path);
				actionValidationResult = actionHandler.validate(CActionConstant.UPDATE_PERIOD, parameters);
				response.setSuccess(actionValidationResult.isValid());
				response.setErrorCode(actionValidationResult.getErrorCode());
				response.setErrorMessage(actionValidationResult.getErrorMessage());
			} while (false);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return response;
	}

	// validate if can delete period
	public CResponse validatePeriodDelete(AccPeriod period) throws Exception {
		CActionValidationParameters parameters = null;
		CActionValidationResult actionValidationResult = null;
		CResponse response = null;
		try {
			do {
				response = new CResponse();
				// check if The period exists
				if (period == null) {
					response.setSuccess(false);
					response.setErrorCode(EErrorCode.PERIOD_NOT_FOUND.toString());
					response.setErrorMessage("الفترة غير موجودة");
					break;
				}

				// set parameters
				parameters = new CActionValidationParameters();
				parameters.addParameter(EKeyCode.PERIOD.toString(), period);
				actionValidationResult = actionHandler.validate(CActionConstant.DELETE_PERIOD, parameters);
				response.setSuccess(actionValidationResult.isValid());
				response.setErrorCode(actionValidationResult.getErrorCode());
				response.setErrorMessage(actionValidationResult.getErrorMessage());
			} while (false);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return response;
	}
	public boolean checkAccPeriodIsDeleted(long id) {
		AccPeriod indCatigoryModule= accPeriodRepository.findById(id).get();
		if (indCatigoryModule.getIsDeleted() == 1)
			return true;
		return false;
	}

}
