package com.template.Controller.Table.Holiday;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.AllIndexes.IndMonth;
import com.template.Model.Table.Holiday.IndHolidays;
import com.template.Service.Table.AllIndexes.IndMonthService;
import com.template.Service.Table.Holiday.*;

@Controller
@RequestMapping("indHolidays")
public class IndHolidaysController {

	@Value("${page.size}")
	int itemCountInPage;

	@Autowired
	IndHolidaysService indHolidaysService;

	@Autowired
	IndMonthService indMonthService;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result;
		CResponse response=null;
		if (page == null)
			page = 0;
		response= indHolidaysService
				.findAllIndHolidays(PageRequest.of(page, itemCountInPage));
		Page<IndHolidays> indHolidaysList =(Page<IndHolidays>) response.getReturnedObject();
		model.addAttribute("indHolidaysList", indHolidaysList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(indHolidaysList));
		result = "/holidays/index-ind-holidays";
		return result;
	}

	@GetMapping("/create")
	public String create(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		IndHolidays indHolidays;
		CResponse response=null;
		if (id == null) {
			indHolidays = new IndHolidays();
		} else {
			response=indHolidaysService.findById(id);
			indHolidays = (IndHolidays)response.getReturnedObject();
		}
		Page<IndMonth> indMonthList = indMonthService.findAllIndMonth(null);
		model.addAttribute("indHolidays", indHolidays);
		model.addAttribute("indMonthList", indMonthList.getContent());
		result = "/holidays/create-ind-holidays";
		return result;
	}

	@PostMapping("/save")
	public String save(@Valid @ModelAttribute("indHolidays") IndHolidays indHolidays, Model model,
			final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=indHolidaysService.save(indHolidays,request.getContextPath());
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	

		result = "redirect:/indHolidays/index";
		return result;
	}

	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response;
		response=indHolidaysService.findById(id);
		IndHolidays indHolidays = (IndHolidays) response.getReturnedObject();
		model.addAttribute("indHolidays", indHolidays);
		result = "/holidays/details-ind-holidays";
		return result;
	}

	@GetMapping("/delete")
	public String delete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response;
		response=indHolidaysService.findById(id);
		IndHolidays indHolidays = (IndHolidays) response.getReturnedObject();
		model.addAttribute("indHolidays", indHolidays);
		result = "/holidays/delete-ind-holidays";
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=indHolidaysService.delete(id);
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		result = "redirect:/indHolidays/index";
		return result;
	}
	// To toggle enable fag
	@GetMapping("/toggle")
	public String changeEnableFlag(@RequestParam(value = "id", required = true) long id, Model model,
			@RequestParam(value = "enable", required = true) int enable,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=indHolidaysService.changeEnableFlag(id,enable);
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		
		result = "redirect:/indHolidays/index";
		return result;
	}
}
