package com.template.Service.Table.AllIndexes;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;
import com.template.Repository.Table.AllIndexes.IndIncomeTypeRepository;

@Service
public class IndIncomeTypeServices {




	@Autowired
	IndIncomeTypeRepository indIncomeTypeRepository;
	/////////////////////////
	
	@Autowired CActionHandler actionHandler;

	public CResponse createSocialStatus(IndIncomeType indIncomeType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Income_Type.toString(), indIncomeType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_INCOME_TYPE, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indIncomeType.setInsertBy(0);
			indIncomeType.setInsertDate(new Date());
			indIncomeTypeRepository.save(indIncomeType);
			
			response.setReturnedObject(indIncomeType);
		}
		while(false);
		
		return response;
	}

	public IndIncomeType updateSocialStatus(IndIncomeType indIncomeType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indIncomeType.getId() == null) 
		{
			
			indIncomeType.setInsertBy(0);
		}
		
		
		
		else if(indIncomeType.getId() != null)
		{
			IndIncomeType temSocialStatus = indIncomeTypeRepository.findById(indIncomeType.getId()).get();
			indIncomeType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indIncomeTypeRepository.save(indIncomeType);
		return indIncomeType;
	}


	public IndIncomeType save(IndIncomeType indIncomeType) {
		if(indIncomeType.getId() == null)
		{
			indIncomeType.setInsertBy(0);
		}else if(indIncomeType.getId() != null){
			IndIncomeType temSignatureType=indIncomeTypeRepository.findById(indIncomeType.getId()).get();
			indIncomeType.setInsertDate(temSignatureType.getInsertDate());
		}
		indIncomeTypeRepository.save(indIncomeType);
		return indIncomeType;
	}
	
	
	public IndIncomeType findById(Long id) {
		return indIncomeTypeRepository.getById(id);
	}
	
	public List<IndIncomeType> getAll(){
		List<IndIncomeType> all = indIncomeTypeRepository.getAll();
		return all;
	}
	
	public List<IndIncomeType> getAllDeleted(){
		List<IndIncomeType> allDeleted = indIncomeTypeRepository.getAllDeleted();
		return allDeleted;
	}

	
	public IndIncomeType delete(Long id) {
		IndIncomeType indIncomeType = indIncomeTypeRepository.findById(id).get();
		if (indIncomeType == null) {
			throw new NoDataFoundException("indAddressType With ID : " + id + " Not Found");
		}
		indIncomeType.setIsDeleted(1);
		return indIncomeTypeRepository.save(indIncomeType);
	}
	
	public IndIncomeType findByNames(String nameA, String nameB) {
		return indIncomeTypeRepository.findByNames(nameA, nameB);
	}

	
	
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}}