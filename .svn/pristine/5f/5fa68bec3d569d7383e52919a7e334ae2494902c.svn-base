
package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndCommissionType;
import com.template.Model.Table.AllIndexes.IndGender;
import com.template.Repository.Table.AllIndexes.IndCommisionTypeRepository;

@Service
public class IndCommissionTypeServices {

	@Autowired
	IndCommisionTypeRepository indCommissionTypeRepository;
	
	@Autowired CActionHandler actionHandler;

	public CResponse createIndCommisionType(IndCommissionType indCommissionType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Commission_Type.toString(), indCommissionType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Commission_Type, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCommissionType.setInsertBy(0);
			indCommissionType.setIsDeleted(0);
			indCommissionType.setInsertDate(new Date());
			indCommissionTypeRepository.save(indCommissionType);
			
			response.setReturnedObject(indCommissionType);
		}
		while(false);
		
		return response;
	}

	public IndCommissionType updateSocialStatus(IndCommissionType indCommissionType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCommissionType.getId() == null) 
		{
			
			indCommissionType.setInsertBy(0);
		}
		
		
		
		else if(indCommissionType.getId() != null)
		{
			IndCommissionType temSocialStatus = indCommissionTypeRepository.findById(indCommissionType.getId()).get();
			indCommissionType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCommissionTypeRepository.save(indCommissionType);
		return indCommissionType;




	}








	public IndCommissionType findByNames(String nameA, String nameB) {
		return indCommissionTypeRepository.findByNames(nameA, nameB);
	}





	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	public IndCommissionType save(IndCommissionType indCommissionType) {
		if (indCommissionType.getId() == null) {
			indCommissionType.setInsertBy(0);
			indCommissionType.setInsertDate(getCurrentDate());
			indCommissionType.setIsDeleted(0);
		} else if (indCommissionType.getId() != null) {
			System.err.println(2121);
			indCommissionType.setInsertDate(getCurrentDate());
			indCommissionType.setLastUpdateDate(getCurrentDate());
			indCommissionType.setLastUpdateBy(1);
		}
		indCommissionTypeRepository.save(indCommissionType);
		return indCommissionType;
	}

	public void update(IndCommissionType indCommissionType) {
		indCommissionTypeRepository.save(indCommissionType);
	}

	public IndCommissionType findById(Long id) {
		return indCommissionTypeRepository.getById(id);
	}

	public List<IndCommissionType> getAll() {
		List<IndCommissionType> all = indCommissionTypeRepository.getAll();
		return all;
	}

	public List<IndCommissionType> getAllDeleted() {
		List<IndCommissionType> allDeleted = indCommissionTypeRepository.getAllDeleted();
		return allDeleted;
	}

	public IndCommissionType delete(Long id) {
		IndCommissionType indCommissionType = indCommissionTypeRepository.findById(id).get();
		if (indCommissionType == null) {
			throw new NoDataFoundException("indCommissionType With ID : " + id + " Not Found");
		}
		indCommissionType.setIsDeleted(1);
		return indCommissionTypeRepository.save(indCommissionType);
	}

	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}
}
