package com.template.Controller.Table.SubpoenaRequest;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.AllIndexes.IndSubpoenaRequest;
import com.template.Model.Table.AllIndexes.SubpoenaRequest;
import com.template.Model.Table.SubpoenaRequest.SubpoenaRequestDetails;
import com.template.Service.Table.AllIndexes.IndSubpoenaRequestServices;
import com.template.Service.Table.AllIndexes.SubpoenaRequestServices;
import com.template.Service.Table.SubpoenaRequest.SubpoenaRequestDetailsService;

@Controller
@RequestMapping("subpoena")
public class SubpoenaRequestDetailsController {

	@Value("${page.size}")
	int itemCountInPage;

	@Autowired
	SubpoenaRequestDetailsService subpoenaRequestDetailsService;
	@Autowired
	IndSubpoenaRequestServices indSubpoenaRequestServices;

	@Autowired
	SubpoenaRequestServices subpoenaRequestServices;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result;
		CResponse response = new CResponse();
		if (page == null)
			page = 0;
		response = subpoenaRequestDetailsService.findAllSubpoenaRequestDetails(PageRequest.of(page, itemCountInPage));
		Page<SubpoenaRequestDetails> subpoenList = (Page<SubpoenaRequestDetails>) response.getReturnedObject();
		model.addAttribute("subpoenList", subpoenList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(subpoenList));
		result = "/subpoena/index";
		return result;
	}

	@GetMapping("/create")
	public String create(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = null;
		SubpoenaRequestDetails subpoenaRequestDetails;
		if (id == null) {
			subpoenaRequestDetails = new SubpoenaRequestDetails();
		} else {
			response = new CResponse();
			response = subpoenaRequestDetailsService.findById(id);
			subpoenaRequestDetails = (SubpoenaRequestDetails) response.getReturnedObject();
			List<SubpoenaRequest> subpoenaRequesList = subpoenaRequestServices
					.findByIndexSubpoenaId(subpoenaRequestDetails.getSubpoenaRequest().getIndSubpoenaRequest().getId());
			model.addAttribute("subpoenaRequesList", subpoenaRequesList);
		}
		List<IndSubpoenaRequest> indSubpoenaRequests = indSubpoenaRequestServices.getAll();
		model.addAttribute("subpoenaRequestDetails", subpoenaRequestDetails);
		model.addAttribute("indSubpoenaRequests", indSubpoenaRequests);
		result = "/subpoena/create";
		return result;
	}

	@PostMapping("/save")
	public String save(@Valid @ModelAttribute("subpoenaRequestDetails") SubpoenaRequestDetails subpoenaRequestDetails,
			Model model, final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;

		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = subpoenaRequestDetailsService.save(subpoenaRequestDetails, request.getContextPath());
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/subpoena/index";
		return result;
	}

	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		response = subpoenaRequestDetailsService.findById(id);
		SubpoenaRequestDetails subpoenaRequestDetails = (SubpoenaRequestDetails) response.getReturnedObject();
		model.addAttribute("subpoenaRequestDetails", subpoenaRequestDetails);
		result = "/subpoena/details";
		return result;
	}

	@GetMapping("/delete")
	public String delete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		response = subpoenaRequestDetailsService.findById(id);
		SubpoenaRequestDetails subpoenaRequestDetails = (SubpoenaRequestDetails) response.getReturnedObject();
		model.addAttribute("subpoenaRequestDetails", subpoenaRequestDetails);
		result = "/subpoena/delete";
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		response = subpoenaRequestDetailsService.delete(id);
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/subpoena/index";
		return result;
	}

	// To toggle enable fag
	@GetMapping("/toggle")
	public String changeEnableFlag(@RequestParam(value = "id", required = true) Long id,
			@RequestParam(value = "enable", required = true) int enable, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = new CResponseDTO();
		response = subpoenaRequestDetailsService.changeEnableFlag(id, enable);
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess())
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		else
			responseDTO.setErrorMessage(response.getErrorMessage());

		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/subpoena/index";
		return result;
	}
}
