package com.template.Service.Table.AllIndexes;


import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndNationality;
import com.template.Model.Table.AllIndexes.IndNonCustDocument;
import com.template.Model.Table.AllIndexes.IndPosition;
import com.template.Repository.Table.AllIndexes.IndNationalityRepository;

@Service
public class IndNationalityServices {
	
	@Autowired
	IndNationalityRepository indNationalityRepository;
	

	@Autowired CActionHandler actionHandler;

	public CResponse createIndNationality(IndNationality indNationality) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Position.toString(), indNationality);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_NATIONALITY, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indNationality.setInsertBy(0);
			indNationality.setInsertDate(new Date());
			indNationalityRepository.save(indNationality);
			
			response.setReturnedObject(indNationality);
		}
		while(false);
		
		return response;
	}

	public IndNationality updateIndNationality(IndNationality indNationality) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indNationality.getId() == null) 
		{
			
			indNationality.setInsertBy(0);
		}
		
		
		
		else if(indNationality.getId() != null)
		{
			IndNationality temSocialStatus = indNationalityRepository.findById(indNationality.getId()).get();
			indNationality.setInsertDate(temSocialStatus.getInsertDate());
		}
		indNationalityRepository.save(indNationality);
		return indNationality;
	}





	

	
	
	
	
	
	public IndNationality save(IndNationality indNationality) {
		if(indNationality.getId() == null)
		{
			indNationality.setInsertBy(0);
			indNationality.setInsertDate(getCurrentDate());
			indNationality.setIsDeleted(0);
		}else if(indNationality.getId() != null){
			System.err.println(2121);
			indNationality.setInsertDate(getCurrentDate());
			indNationality.setLastUpdateDate(getCurrentDate());
			indNationality.setLastUpdateBy(1);
		}
		indNationalityRepository.save(indNationality);
		return indNationality;
	}
	
	
	public IndNationality findByNames(String nameA, String nameB) {
		return indNationalityRepository.findByNames(nameA, nameB);
	}
	
	
	public void update(IndNationality indNationality) {
		indNationalityRepository.save(indNationality);
	}
	
	public IndNationality findById(Long id) {
		return indNationalityRepository.getById(id);
	}
	
	public List<IndNationality> getAll(){
		List<IndNationality> all = indNationalityRepository.getAll();
		return all;
	}
	
	public List<IndNationality> getAllDeleted(){
		List<IndNationality> allDeleted = indNationalityRepository.getAllDeleted();
		return allDeleted;
	}

	public IndNationality delete(Long id) {
		IndNationality indNationality = indNationalityRepository.findById(id).get();
		if (indNationality == null) {
			throw new NoDataFoundException("indNationality With ID : " + id + " Not Found");
		}
		indNationality.setIsDeleted(1);
		return indNationalityRepository.save(indNationality);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}

}
