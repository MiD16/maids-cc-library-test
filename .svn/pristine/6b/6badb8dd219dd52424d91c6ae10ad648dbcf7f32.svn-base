package com.template.Service.Table.AllIndexes;


import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndRegion;
import com.template.Model.Table.AllIndexes.IndSignatureType;
import com.template.Model.Table.AllIndexes.IndSocialStatus;
import com.template.Repository.Table.AllIndexes.IndRegionRepository;

@Service
public class IndRegionServices {
	
	@Autowired
	IndRegionRepository indRegionRepository;
	@Autowired CActionHandler actionHandler;
	
	public CResponse createIndSignatureType(IndRegion indRegion) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.IND_REGION.toString(), indRegion);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_REGION, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indRegion.setInsertBy(0);
			indRegion.setInsertDate(new Date());
			indRegionRepository.save(indRegion);
			
			response.setReturnedObject(indRegion);
		}
		while(false);
		
		return response;
	}
	
	public IndRegion updateSocialStatus(IndRegion indRegion) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indRegion.getId() == null) 
		{
			
			indRegion.setInsertBy(0);
		}
		
		
		
		else if(indRegion.getId() != null)
		{
			IndRegion temSocialStatus = indRegionRepository.findById(indRegion.getId()).get();
			indRegion.setInsertDate(temSocialStatus.getInsertDate());
		}
		indRegionRepository.save(indRegion);
		return indRegion;
	
	
	
	
	}
	
	
	public IndRegion save(IndRegion indRegion) {
		if(indRegion.getId() == null)
		{
			indRegion.setInsertBy(0);
		}else if(indRegion.getId() != null){
			IndRegion temSignatureType=indRegionRepository.findById(indRegion.getId()).get();
			indRegion.setInsertDate(temSignatureType.getInsertDate());
		}
		indRegionRepository.save(indRegion);
		return indRegion;
	}
	
	
	
	
	
	
	
	public IndRegion findByNames(String nameA, String nameB) {
		return indRegionRepository.findByNames(nameA, nameB);
	}
	
	

	
	public void update(IndRegion indRegion) {
		indRegionRepository.save(indRegion);
	}
	
	public IndRegion findById(Long id) {
		return indRegionRepository.getById(id);
	}
	
	public List<IndRegion> getAll(){
		List<IndRegion> all = indRegionRepository.getAll();
		return all;
	}
	
	public List<IndRegion> getAllDeleted(){
		List<IndRegion> allDeleted = indRegionRepository.getAllDeleted();
		return allDeleted;
	}

	public IndRegion delete(Long id) {
		IndRegion indRegion = indRegionRepository.findById(id).get();
		if (indRegion == null) {
			throw new NoDataFoundException("indRegion With ID : " + id + " Not Found");
		}
		indRegion.setIsDeleted(1);
		return indRegionRepository.save(indRegion);
	}

}
