package com.template.Controller.Table.Holiday;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.Holiday.Holidays;
import com.template.Service.Table.Holiday.HolidaysService;
@Controller
@RequestMapping("holidays")
public class HolidaysController {

	@Value("${page.size}")
	int itemCountInPage;

	@Autowired
	HolidaysService holidaysService;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page,
			@RequestParam(name = "fromHolidays", required = true) int fromHolidays) {
		String result;
		CResponse response=null;
		// fromHolidays: It is only used to organize display in jsp pages
		if (page == null)
			page = 0;
		response= holidaysService
				.findAllHolidaysWithoutIndHolidays(PageRequest.of(page, itemCountInPage));
		Page<Holidays> holidaysList =(Page<Holidays>) response.getReturnedObject();
		model.addAttribute("holidaysList", holidaysList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(holidaysList));
		if (fromHolidays == 1)
			result = "/holidays/index-holidays";
		else {
			result = "/holidays/index-holidays-by-ind";
		}
		return result;
	}

	@GetMapping("/create")
	public String create(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		Holidays holidays;
		CResponse response=null;
		if (id == null) {
			holidays = new Holidays();
		} else {
			response=holidaysService.findById(id);
			holidays =(Holidays) response.getReturnedObject();
		}
		model.addAttribute("holidays", holidays);
		result = "/holidays/create-holidays";
		return result;
	}

	@PostMapping("/save")
	public String save(@Valid @ModelAttribute("holidays") Holidays holidays, Model model,
			final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=holidaysService.save(holidays,request.getParameter("dayFlag"), request.getParameter("startDate"),request.getParameter("endDate"));
		System.err.println("nbbvvvvvvvvvvvvvvvvvv");
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		System.err.println("mnnnnnnnnnnnnnnnnnnnnnj");
		result = "redirect:/holidays/index?fromHolidays=1";
		return result;
	}
	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id,
			@RequestParam(name = "fromHolidays", required = true) int fromHolidays, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response=null;
		response=holidaysService.findById(id);
		Holidays holidays =(Holidays) response.getReturnedObject();
		model.addAttribute("holidays", holidays);
		model.addAttribute("fromHolidays", fromHolidays);
		result = "/holidays/details-holidays";
		return result;
	}

	@GetMapping("/delete")
	public String delete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response=null;
		response=holidaysService.findById(id);
		Holidays holidays =(Holidays) response.getReturnedObject();
		model.addAttribute("holidays", holidays);
		result = "/holidays/delete-holidays";
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result =null;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=holidaysService.delete(id);
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		result = "redirect:/holidays/index?fromHolidays=1";
		return result;
	}

	// Get a list of holidays related to the fixed holiday
	@GetMapping("/index/byIndholiday")
	public String indexByIndHoliday(@RequestParam(value = "indId", required = true) Long indId, Model model,
			final RedirectAttributes redirectAttributes, @RequestParam(name = "page", required = false) Integer page) {
		String result;
		if (page == null)
			page = 0;
		Page<Holidays> holidaysList = holidaysService.findByIndHolidaysId(PageRequest.of(page, itemCountInPage), indId);
		model.addAttribute("holidaysList", holidaysList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(holidaysList));
		result = "/holidays/index-holidays-by-ind";
		return result;
	}

	// To toggle enable fag
	@GetMapping("/toggle")
	public String changeEnableFlag(@RequestParam(value = "id", required = true) Long id,@RequestParam(value = "enable", required = true) int enable,
			@RequestParam(name = "fromHolidays", required = true) Integer fromHolidays, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response=null;
		CResponseDTO responseDTO=null;
		response=holidaysService.changeEnableFlag(id,enable);
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		if (fromHolidays == 1)
			result = "redirect:/holidays/index?fromHolidays=" + fromHolidays;
		else {
			Holidays holidays =  (Holidays) response.getReturnedObject();
			result = "redirect:/holidays/index/byIndholiday?indId=" + holidays.getIndHolidays().getId();
		}
		return result;
	}
}
