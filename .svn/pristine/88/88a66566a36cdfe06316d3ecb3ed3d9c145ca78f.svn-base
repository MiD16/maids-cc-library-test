package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;
import com.template.Model.Table.Holiday.Holidays;
import com.template.Repository.Table.AllIndexes.BranchRepository;
@Service
public class BranchServices {


@Autowired
BranchRepository branchRepository;
/////////////////////////
@Autowired
CActionHandler actionHandler;

public CResponse Branch(Branch branch) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	do
	{
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		
		actionValidationParameters.addParameter(EKeyCode.Branch.toString(), branch);
		
		actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Branch, actionValidationParameters);
		
		if(!actionValidationResult.isValid())
		{
			response.setSuccess(false);
			response.setErrorMessage(actionValidationResult.getErrorMessage());
			break;
		}
		
		branch.setInsertBy(0);
		branch.setIsDeleted(0);
		branch.setInsertDate(new Date());
		branchRepository.save(branch);
		
		response.setReturnedObject(branch);
	}
	while(false);
	
	return response;
}

public Branch updateBranch (Branch branch) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	response = new CResponse();
	actionValidationParameters = new CActionValidationParameters();
	actionValidationResult = new CActionValidationResult();
	
	if(branch.getId() == null) 
	{
		
		branch.setInsertBy(0);
	}
	
	
	
	else if(branch.getId() != null)
	{
		Branch temSocialStatus =branchRepository.findById(branch.getId()).get();
		branch.setInsertDate(temSocialStatus.getInsertDate());
	}
	branchRepository.save(branch);
	return branch;




}


public Branch findByNames(String nameA, String nameB) {
	return branchRepository.findByNames(nameA, nameB);
}






































public Branch save(Branch branch) {
	if(branch.getId() == null)
	{
		branch.setInsertBy(0);
		branch.setInsertDate(getCurrentDate());
		branch.setIsDeleted(0);
	}else if(branch.getId() != null){
		System.err.println(2121);
		branch.setInsertDate(getCurrentDate());
		branch.setLastUpdateDate(getCurrentDate());
		branch.setLastUpdateBy(1);
	}
	branchRepository.save(branch);
	return branch;
}

public void update(Branch branch) {
	branchRepository.save(branch);
}

public Branch findById(Long id) {
	return branchRepository.getById(id);
}

public List<Branch> getAll(){
	List<Branch> all = branchRepository.getAll();
	return all;
}

public List<Branch> getAllDeleted(){
	List<Branch> allDeleted = branchRepository.getAllDeleted();
	return allDeleted;
}


public Branch delete(Long id) {
	Branch branch = branchRepository.findById(id).get();
	if (branch == null) {
		throw new NoDataFoundException("indAddressType With ID : " + id + " Not Found");
	}
	branch.setIsDeleted(1);
	return branchRepository.save(branch);
}

public List<Branch> findBranchNotInBranchHoliday(Long id){
	List<Branch> branchs = branchRepository.findBranchNotInBranchHoliday(id);
	return branchs;
}

public boolean checkBranchIsDeleted(long id) {
	Branch branch = branchRepository.findById(id).get();
	if (branch.getIsDeleted() == 1)
		return true;
	return false;
}

private static java.sql.Date getCurrentDate() {
	java.util.Date today = new java.util.Date();
	return new java.sql.Date(today.getTime());
}}