	package com.template.Service.Table.AllIndexes;

	import java.util.Date;
import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
	import com.template.Model.Table.AllIndexes.*;

import com.template.Repository.Table.AllIndexes.CustomerStageRepository;
import com.template.Repository.Table.AllIndexes.IndBlacklistDocStatusRepository;
	import com.template.Repository.Table.AllIndexes.IndCityRepositry;
	
	@Service
public class CustomerStageServices {





		@Autowired
		CustomerStageRepository customerStageRepository;	
		@Autowired
		CActionHandler actionHandler;

		
		
		


		
		public CResponse createCustomerStage(CustomerStage customerStage) 
		{
			CResponse response = null;
			CActionValidationParameters actionValidationParameters = null;
			CActionValidationResult actionValidationResult = null;
			
			do
			{
				response = new CResponse();
				actionValidationParameters = new CActionValidationParameters();
				
				actionValidationParameters.addParameter(EKeyCode.Ind_Customer_Stage.toString(), customerStage);
				
				actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Customer_Stage, actionValidationParameters);
				
				if(!actionValidationResult.isValid())
				{
					response.setSuccess(false);
					response.setErrorMessage(actionValidationResult.getErrorMessage());
					break;
				}
				
				customerStage.setInsertBy(0);
				customerStage.setIsDeleted(0);
				customerStage.setInsertDate(new Date());
				customerStageRepository.save(customerStage);
				
				response.setReturnedObject(customerStage);
			}
			while(false);
			
			return response;
		}
		
		public CustomerStage updateIndBlacklistDocStatust (CustomerStage customerStage) 
		{
			CResponse response = null;
			CActionValidationParameters actionValidationParameters = null;
			CActionValidationResult actionValidationResult = null;
			
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			actionValidationResult = new CActionValidationResult();
			
			if(customerStage.getId() == null) 
			{
				
				customerStage.setInsertBy(0);
			}
			
			
			
			else if(customerStage.getId() != null)
			{
				CustomerStage temSocialStatus =customerStageRepository.findById(customerStage.getId()).get();
				customerStage.setInsertDate(temSocialStatus.getInsertDate());
			}
			customerStageRepository.save(customerStage);
			return customerStage;
		
		
		
		
		}
		
		
		public CustomerStage findByNames(String nameA, String nameB) {
			return customerStageRepository.findByNames(nameA, nameB);
		}

		public CustomerStage save(CustomerStage customerStage) {
			if(customerStage.getId() == null)
			{
				customerStage.setInsertBy(0);
			}else if(customerStage.getId() != null){
				CustomerStage temSignatureType=customerStageRepository.findById(customerStage.getId()).get();
				customerStage.setInsertDate(temSignatureType.getInsertDate());
			}
			customerStageRepository.save(customerStage);
			return customerStage;
		}
		
		public void update(CustomerStage customerStage) {
			customerStageRepository.save(customerStage);
		}
		
		public CustomerStage findById(Long id) {
			return customerStageRepository.getById(id);
		}
		
		public List<CustomerStage> getAll(){
			List<CustomerStage> all = customerStageRepository.getAll();
			return all;
		}
		
		public List<CustomerStage> getAllDeleted(){
			List<CustomerStage> allDeleted = customerStageRepository.getAllDeleted();
			return allDeleted;
		}

		public CustomerStage delete(Long id) {
			CustomerStage customerStage = customerStageRepository.findById(id).get();
			if (customerStage == null) {
				throw new NoDataFoundException("indSignatureType With ID : " + id + " Not Found");
			}
			customerStage.setIsDeleted(1);
			return customerStageRepository.save(customerStage);
		}
		
	}
	