package com.template.Controller.Table.Periods;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.AllIndexes.AccIndDateUnit;
import com.template.Model.Table.AllIndexes.AccIndInterestType;
import com.template.Model.Table.Interests.AccInterest;
import com.template.Model.Table.Products.AccPeriod;
import com.template.Service.Table.AllIndexes.AccIndDateUnitService;
import com.template.Service.Table.AllIndexes.AccIndInterestTypeService;
import com.template.Service.Table.Interest.AccInterestService;
import com.template.Service.Table.Product.AccPeriodService;

import oracle.net.aso.p;

@Controller
@RequestMapping("periods")
public class PeriodsController {

	@Value("${page.size}")
	int itemCountInPage;

	@Autowired
	AccIndInterestTypeService accIndInterestTypeService;
	@Autowired
	AccPeriodService accPeriodService;
	
	@Autowired
	AccIndDateUnitService dateUnitService;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result;
		CResponse response = new CResponse();
		if (page == null)
			page = 0;
		//get list of interests
		response = accPeriodService.getAll(PageRequest.of(page, itemCountInPage));
		Page<AccPeriod> periodList = (Page<AccPeriod>) response.getReturnedObject();
		model.addAttribute("periodList", periodList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(periodList));
		result = "/period/index";
		return result;
	}

	@GetMapping("/create")
	public String create(Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = null;
		AccPeriod period;
		//init object
		period = new AccPeriod();
		//get all date unit
		response=dateUnitService.getAll(null);
		Page<AccIndDateUnit> accIndDateUnitsPage = (Page<AccIndDateUnit>) response.getReturnedObject();
		List<AccIndDateUnit> indDateUnits =accIndDateUnitsPage.getContent();
		//add to model
		model.addAttribute("period", period);
		model.addAttribute("indDateUnits", indDateUnits);
		result = "/period/create";
		return result;
	}
	
	
	@GetMapping("/update")
	public String update(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = null;
		AccPeriod period;
	    response = new CResponse();
		//get interest from database
		response = accPeriodService.findById(id);
		period = (AccPeriod) response.getReturnedObject();
		//get all date unit
		response=dateUnitService.getAll(null);
		Page<AccIndDateUnit> accIndDateUnitsPage = (Page<AccIndDateUnit>) response.getReturnedObject();
		List<AccIndDateUnit> indDateUnits =accIndDateUnitsPage.getContent();
		//add to model
		model.addAttribute("period", period);
		model.addAttribute("indDateUnits", indDateUnits);
		result = "/period/create";
		return result;
	}

	@PostMapping("/create/save")
	public String saveCreate(@Valid @ModelAttribute("period") AccPeriod period,
			Model model, final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save in database
		response = accPeriodService.saveCreate(period, request.getContextPath());
		//get result
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/periods/index";
		return result;
	}
	
	@PostMapping("/update/save")
	public String saveUpdate(@Valid @ModelAttribute("period") AccPeriod period,
			Model model, final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save in database
		response = accPeriodService.saveUpdate(period, request.getContextPath());
		//get result
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/periods/index";
		return result;
	}

	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		//get interest from database
		response = accPeriodService.findById(id);
		AccPeriod period= (AccPeriod) response.getReturnedObject();
		//add to model
		model.addAttribute("period", period);
		result = "/period/details";
		return result;
	}

	@GetMapping("/delete")
	public String delete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		//get interest from database
		response = accPeriodService.findById(id);
		AccPeriod period= (AccPeriod) response.getReturnedObject();
		//add to model
		model.addAttribute("period", period);
		result = "/period/delete";
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save delete
		response = accPeriodService.delete(id);
		responseDTO = new CResponseDTO();
		//get result
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/periods/index";
		return result;
	}

}
