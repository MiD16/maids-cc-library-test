package com.template.Controller.Table.Interset;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Table.AllIndexes.AccIndDateUnit;
import com.template.Model.Table.Interests.AccInterest;
import com.template.Model.Table.Interests.AccInterestRate;
import com.template.Model.Table.Products.AccCurrency;
import com.template.Model.Table.Products.AccPeriod;
import com.template.Service.Table.Interest.AccInterestService;
import com.template.Service.Table.Interest.InterestRateService;
import com.template.Service.Table.Product.AccCurrencyService;
import com.template.Service.Table.Product.AccPeriodService;

@Controller
@RequestMapping("interestRate")
public class InterestRateController {

	@Value("${page.size}")
	int itemCountInPage;

	@Autowired
	InterestRateService interestRateService;

	@Autowired
	AccInterestService interestService;

	@Autowired
	AccPeriodService periodService;

	@Autowired
	AccCurrencyService accCurrencyService;

	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result;
		CResponse response = new CResponse();
		if (page == null)
			page = 0;
		// get list of interest rates
		response = interestRateService.findAllInterestRate(PageRequest.of(page, itemCountInPage));
		Page<AccInterestRate> interestRateList = (Page<AccInterestRate>) response.getReturnedObject();
		//add to model
		model.addAttribute("interestRateList", interestRateList.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(interestRateList));
		result = "/interest-rate/index";
		return result;
	}

	@GetMapping("/create")
	public String create(Model model, final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = null;
		List<AccCurrency> currencies = null;
		List<AccPeriod> periods = null;
		Page<AccPeriod> periodsPage = null;
		Page<AccInterest> interestList = null;
		//init interest rate
		AccInterestRate interestRate = new AccInterestRate();
		// get list of interests
		response = interestService.findAllIndInterest(null);
		interestList = (Page<AccInterest>) response.getReturnedObject();
		// get list of periods
		response = periodService.getAll(null);
		periodsPage =  (Page<AccPeriod>) response.getReturnedObject();
		periods =periodsPage.getContent();
		
		response = accCurrencyService.getAll();
		// get list of currencies
		currencies = (List<AccCurrency>) response.getReturnedObject();
		// add to model
		model.addAttribute("interests", interestList.getContent());
		model.addAttribute("periods", periods);
		model.addAttribute("currencies", currencies);
		model.addAttribute("interestRate", interestRate);

		result = "/interest-rate/create";
		return result;
	}

	@GetMapping("/update")
	public String update(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		AccInterestRate interestRate = null;
		CResponse responseInterest = null;
		CResponse responseCurrency = null;
		CResponse response = null;
		List<AccCurrency> currencies = null;
		List<AccPeriod> periods = null;
		Page<AccPeriod> periodsPage = null;
		Page<AccInterest> interestList = null;
		// get object from database
		response = interestRateService.findById(id);
		interestRate = (AccInterestRate) response.getReturnedObject();
		// get list of interests
		responseInterest = interestService.findAllIndInterest(null);
		interestList = (Page<AccInterest>) responseInterest.getReturnedObject();
		// get list of periods
		response = periodService.getAll(null);
		periodsPage =  (Page<AccPeriod>) response.getReturnedObject();
		periods =periodsPage.getContent();
		// get list of currencies
		responseCurrency = accCurrencyService.getAll();
		currencies = (List<AccCurrency>) responseCurrency.getReturnedObject();
		// add to model
		model.addAttribute("interests", interestList.getContent());
		model.addAttribute("periods", periods);
		model.addAttribute("currencies", currencies);
		model.addAttribute("interestRate", interestRate);
		result = "/interest-rate/create";
		return result;
	}

	@PostMapping("/create/save")
	public String saveCreate(@Valid @ModelAttribute("interestRate") AccInterestRate interestRate, Model model,
			final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save in database
		response = interestRateService.saveCreate(interestRate, request.getContextPath());
		responseDTO = new CResponseDTO();
		//get result
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/interestRate/index";
		return result;
	}

	@PostMapping("/update/save")
	public String saveUpdate(@Valid @ModelAttribute("interestRate") AccInterestRate interestRate, Model model,
			final RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save update in database
		response = interestRateService.saveUpdate(interestRate, request.getContextPath());
		responseDTO = new CResponseDTO();
		//get result
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/interestRate/index";
		return result;
	}

	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		//get object from database
		response = interestRateService.findById(id);
		AccInterestRate interestRate = (AccInterestRate) response.getReturnedObject();
		//add to model
		model.addAttribute("interestRate", interestRate);
		result = "/interest-rate/details";
		return result;
	}

	@GetMapping("/delete")
	public String delete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		//get object from database
		response = interestRateService.findById(id);
		AccInterestRate interestRate = (AccInterestRate) response.getReturnedObject();
		//add to model
		model.addAttribute("interestRate", interestRate);
		result = "/interest-rate/delete";
		return result;
	}

	@GetMapping("/save/delete")
	public String saveDelete(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		//save in database
		response = interestRateService.delete(id);
		responseDTO = new CResponseDTO();
		//get result
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/interestRate/index";
		return result;
	}

}
