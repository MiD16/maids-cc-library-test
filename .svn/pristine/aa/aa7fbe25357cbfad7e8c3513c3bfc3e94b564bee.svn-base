package com.template.Service.Table.AllIndexes;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.Base.Class.CResponse;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;
import com.template.Repository.Table.AllIndexes.IndAddressTypeRepository;
import com.template.Repository.Table.AllIndexes.IndFileTypeRepository;

import java.util.Date;
import java.util.List;


@Service
public class IndFileTypeServices {



@Autowired
IndFileTypeRepository indFileTypeRepository;
@Autowired CActionHandler actionHandler;

public CResponse createIndSignatureType(IndFileType indFileType) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	do
	{
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		
		actionValidationParameters.addParameter(EKeyCode.Ind_File_Type.toString(), indFileType);
		
		actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_File_Type, actionValidationParameters);
		
		if(!actionValidationResult.isValid())
		{
			response.setSuccess(false);
			response.setErrorMessage(actionValidationResult.getErrorMessage());
			break;
		}
		
		indFileType.setInsertBy(0);
		indFileType.setIsDeleted(0);
		indFileType.setInsertDate(new Date());
		indFileTypeRepository.save(indFileType);
		
		response.setReturnedObject(indFileType);
	}
	while(false);
	
	return response;
}

public IndFileType updateSocialStatus(IndFileType indFileType) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	response = new CResponse();
	actionValidationParameters = new CActionValidationParameters();
	actionValidationResult = new CActionValidationResult();
	
	if(indFileType.getId() == null) 
	{
		
		indFileType.setInsertBy(0);
	}
	
	
	
	else if(indFileType.getId() != null)
	{
		IndFileType temSocialStatus = indFileTypeRepository.findById(indFileType.getId()).get();
		indFileType.setInsertDate(temSocialStatus.getInsertDate());
	}
	indFileTypeRepository.save(indFileType);
	return indFileType;




}








public IndFileType findByNames(String nameA, String nameB) {
	return indFileTypeRepository.findByNames(nameA, nameB);
}



public IndFileType save(IndFileType indFileType) {
	if(indFileType.getId() == null)
	{
		indFileType.setInsertBy(0);
	}else if(indFileType.getId() != null){
		IndFileType temSignatureType=indFileTypeRepository.findById(indFileType.getId()).get();
		indFileType.setInsertDate(temSignatureType.getInsertDate());
	}
	indFileTypeRepository.save(indFileType);
	return indFileType;
}

public IndFileType findById(Long id) {
	return indFileTypeRepository.findById(id).get();
}

public CResponse getAll(){
	CResponse response = null;	
	response= new CResponse();
	response.setReturnedObject(indFileTypeRepository.getAll());
	return response;
}

public List<IndFileType> getAllDeleted(){
	List<IndFileType> allDeleted = indFileTypeRepository.getAllDeleted();
	return allDeleted;
}

public IndFileType delete(Long id) {
	IndFileType indFileType = indFileTypeRepository.findById(id).get();
	if (indFileType == null) {
		throw new NoDataFoundException("indSocialStatus With ID : " + id + " Not Found");
	}
	indFileType.setIsDeleted(1);
	return indFileTypeRepository.save(indFileType);
}

private static java.sql.Date getCurrentDate() {
	java.util.Date today = new java.util.Date();
	return new java.sql.Date(today.getTime());
}

public boolean checkFileTypeIsDeleted(Long id) {
	IndFileType indFlFileType = indFileTypeRepository.findById(id).get();
	if(indFlFileType.getIsDeleted() == 1)
		return true;
	return false;
}

}

