package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.ActionCustomerNature;
import com.template.Model.Table.AllIndexes.Branch;
import com.template.Model.Table.AllIndexes.IndAddressType;
import com.template.Model.Table.AllIndexes.IndBranchType;
import com.template.Model.Table.AllIndexes.IndCity;
import com.template.Model.Table.AllIndexes.IndCountry;
import com.template.Model.Table.AllIndexes.SubpoenaRequest;
import com.template.Repository.Basic.ActionsRep;
import com.template.Repository.Table.AllIndexes.ActionCustomerNatureRepository;
import com.template.Repository.Table.AllIndexes.BranchRepository;
import com.template.Repository.Table.AllIndexes.IndAddressTypeRepository;
import com.template.Repository.Table.AllIndexes.IndCustomerNatureRepository;

@Service
public class ActionCustomerNatureService {

	
	@Autowired
	ActionCustomerNatureRepository actionCustomerNatureRepository;
	
	@Autowired CActionHandler actionHandler;

	
	
	


	
	public CResponse createActionCustomerNature(ActionCustomerNature actionCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Action_Customer_Nature.toString(), actionCustomerNature);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Customer_NAture, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			actionCustomerNature.setInsertBy(0);
			actionCustomerNature.setIsDeleted(0);
			actionCustomerNature.setInsertDate(new Date());
			actionCustomerNatureRepository.save(actionCustomerNature);
			
			response.setReturnedObject(actionCustomerNature);
		}
		while(false);
		
		return response;
	}
	
	public ActionCustomerNature updateIndBlacklistDocStatust (ActionCustomerNature actionCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(actionCustomerNature.getId() == null) 
		{
			
			actionCustomerNature.setInsertBy(0);
		}
		
		
		
		else if(actionCustomerNature.getId() != null)
		{
			ActionCustomerNature temSocialStatus = actionCustomerNatureRepository.findById(actionCustomerNature.getId()).get();
			actionCustomerNature.setInsertDate(temSocialStatus.getInsertDate());
		}
		actionCustomerNatureRepository.save(actionCustomerNature);
		return actionCustomerNature;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public ActionCustomerNature findByNames(String nameA, String nameB) {
		return actionCustomerNatureRepository.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public ActionCustomerNature save(ActionCustomerNature actionCustomerNature) {
		if(actionCustomerNature.getId() == null)
		{
			actionCustomerNature.setInsertBy(0);
		}else if(actionCustomerNature.getId() != null){
			ActionCustomerNature temCompany=actionCustomerNatureRepository.findById(actionCustomerNature.getId()).get();
			actionCustomerNature.setInsertDate(temCompany.getInsertDate());
		}
		actionCustomerNatureRepository.save(actionCustomerNature);
		return actionCustomerNature;
	}
	
	public void update(ActionCustomerNature actionCustomerNature) {
		actionCustomerNatureRepository.save(actionCustomerNature);
	}
	
	public ActionCustomerNature findById(Long id) {
		return actionCustomerNatureRepository.getById(id);
	}
	
	public List<ActionCustomerNature> getAll(){
		List<ActionCustomerNature> all = actionCustomerNatureRepository.getAll();
		return all;
	}
	
	public List<ActionCustomerNature> getAllDeleted(){
		List<ActionCustomerNature> allDeleted = actionCustomerNatureRepository.getAllDeleted();
		return allDeleted;
	}

	public ActionCustomerNature delete(Long id) {
		ActionCustomerNature actionCustomerNature = actionCustomerNatureRepository.findById(id).get();
		if (actionCustomerNature == null) {
			throw new NoDataFoundException("indAddressType With ID : " + id + " Not Found");
		}
		actionCustomerNature.setIsDeleted(1);
		return actionCustomerNatureRepository.save(actionCustomerNature);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*
	@Autowired
	ActionCustomerNatureRepository  actionCustomerNatureRepository;
  

	@Autowired CActionHandler actionHandler;

	
	
	


	
	public CResponse createActionCustomerNature(ActionCustomerNature actionCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Action_Customer_Nature.toString(), actionCustomerNature);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Action_Customer_Nature, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			actionCustomerNature.setInsertBy(0);
			actionCustomerNature.setIsDeleted(0);
			actionCustomerNature.setInsertDate(new Date());
			actionCustomerNatureRepository.save(actionCustomerNature);
			
			response.setReturnedObject(actionCustomerNature);
		}
		while(false);
		
		return response;
	}
	
	public ActionCustomerNature updateActionCustomerNature (ActionCustomerNature actionCustomerNature) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(actionCustomerNature.getId() == null) 
		{
			
			actionCustomerNature.setInsertBy(0);
		}
		
		
		
		else if(actionCustomerNature.getId() != null)
		{
			ActionCustomerNature temSocialStatus = actionCustomerNatureRepository.findById(actionCustomerNature.getId()).get();
			actionCustomerNature.setInsertDate(temSocialStatus.getInsertDate());
		}
		actionCustomerNatureRepository.save(actionCustomerNature);
		return actionCustomerNature;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public ActionCustomerNature findByNames(String id ) {
		return actionCustomerNatureRepository.findByNames(id);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
public ActionCustomerNature save(ActionCustomerNature actionCustomerNature) {
	if(actionCustomerNature.getId() == null)
	{
		actionCustomerNature.setInsertBy(0);
		actionCustomerNature.setInsertDate(getCurrentDate());
		actionCustomerNature.setIsDeleted(0);
	}else if(actionCustomerNature.getId() != null){
		System.err.println(2121);
		actionCustomerNature.setInsertDate(getCurrentDate());
		actionCustomerNature.setLastUpdateDate(getCurrentDate());
		actionCustomerNature.setLastUpdateBy(1);
	}
	actionCustomerNatureRepository.save(actionCustomerNature);
	return actionCustomerNature;
}

public void update(ActionCustomerNature actionCustomerNature) {
	actionCustomerNatureRepository.save(actionCustomerNature);
}

public ActionCustomerNature findById(Long id) {
	return actionCustomerNatureRepository.getById(id);
}

public List<ActionCustomerNature> getAll(){
	List<ActionCustomerNature> all = actionCustomerNatureRepository.getAll();
	return all;
}

public List<ActionCustomerNature> getAllDeleted(){
	List<ActionCustomerNature> allDeleted = actionCustomerNatureRepository.getAllDeleted();
	return allDeleted;
}


public ActionCustomerNature delete(Long id) {
	ActionCustomerNature actionCustomerNature = actionCustomerNatureRepository.findById(id).get();
	if (actionCustomerNature == null) {
		throw new NoDataFoundException("indAddressType With ID : " + id + " Not Found");
	}
	actionCustomerNature.setIsDeleted(1);
	return actionCustomerNatureRepository.save(actionCustomerNature);
}
















public static java.sql.Date getCurrentDate() {
	java.util.Date today = new java.util.Date();
	return new java.sql.Date(today.getTime());
}
	
	
	
	
	
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
