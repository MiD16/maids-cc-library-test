package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndAddressType;
import com.template.Model.Table.AllIndexes.IndBlacklistDocStatus;
import com.template.Repository.Table.AllIndexes.IndAddressTypeRepository;

@Service
public class IndAddressTypeService {
	
	@Autowired
	IndAddressTypeRepository indAddressTypeRepository;
	
	@Autowired CActionHandler actionHandler;

	
	
	


	
	public CResponse createIndAddressType(IndAddressType indAddressType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Address_Type.toString(), indAddressType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Address_Type, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indAddressType.setInsertBy(0);
			indAddressType.setIsDeleted(0);
			indAddressType.setInsertDate(new Date());
			indAddressTypeRepository.save(indAddressType);
			
			response.setReturnedObject(indAddressType);
		}
		while(false);
		
		return response;
	}
	
	public IndAddressType updateIndBlacklistDocStatust (IndAddressType indAddressType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indAddressType.getId() == null) 
		{
			
			indAddressType.setInsertBy(0);
		}
		
		
		
		else if(indAddressType.getId() != null)
		{
			IndAddressType temSocialStatus = indAddressTypeRepository.findById(indAddressType.getId()).get();
			indAddressType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indAddressTypeRepository.save(indAddressType);
		return indAddressType;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndAddressType findByNames(String nameA, String nameB) {
		return indAddressTypeRepository.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public IndAddressType save(IndAddressType indAddressType) {
		if(indAddressType.getId() == null)
		{
			indAddressType.setInsertBy(0);
		}else if(indAddressType.getId() != null){
			IndAddressType temCompany=indAddressTypeRepository.findById(indAddressType.getId()).get();
			indAddressType.setInsertDate(temCompany.getInsertDate());
		}
		indAddressTypeRepository.save(indAddressType);
		return indAddressType;
	}
	
	public void update(IndAddressType indAddressType) {
		indAddressTypeRepository.save(indAddressType);
	}
	
	public IndAddressType findById(Long id) {
		return indAddressTypeRepository.getById(id);
	}
	
	public List<IndAddressType> getAll(){
		List<IndAddressType> all = indAddressTypeRepository.getAll();
		return all;
	}
	
	public List<IndAddressType> getAllDeleted(){
		List<IndAddressType> allDeleted = indAddressTypeRepository.getAllDeleted();
		return allDeleted;
	}

	public IndAddressType delete(Long id) {
		IndAddressType indAddressType = indAddressTypeRepository.findById(id).get();
		if (indAddressType == null) {
			throw new NoDataFoundException("indAddressType With ID : " + id + " Not Found");
		}
		indAddressType.setIsDeleted(1);
		return indAddressTypeRepository.save(indAddressType);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}
}
