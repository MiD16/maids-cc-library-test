package com.template.Controller.Table.Products;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.ClassesForm.*;
import com.template.Class.GeneralLedger;
import com.template.Class.SearchForAccountType;
import com.template.Class.Pageing.PageInfo;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.Products.AccCurrency;
import com.template.Model.Table.AllIndexes.AccIndAccountTypeCategories;
import com.template.Model.Table.AllIndexes.AccIndDateUnit;
import com.template.Model.Table.Products.AccPeriod;
import com.template.Model.Table.Products.AccountType;
import com.template.Model.Table.Products.AccountTypeCurrency;
import com.template.Model.Table.Products.AccountTypeNature;
import com.template.Model.Table.Tax.Tax;
import com.template.Model.Table.AllIndexes.IndCustomerNature;
import com.template.Model.Table.AllIndexes.IndFileType;
import com.template.Model.Table.Interests.AccInterest;
import com.template.Service.Table.AllIndexes.AccIndAccountTypeCategoriesService;
import com.template.Service.Table.AllIndexes.AccIndDateUnitService;
import com.template.Service.Table.AllIndexes.IndCustomerNatureServices;
import com.template.Service.Table.AllIndexes.IndFileTypeServices;
import com.template.Service.Table.Interest.AccInterestService;
import com.template.Service.Table.Product.AccCurrencyService;
import com.template.Service.Table.Product.AccPeriodService;
import com.template.Service.Table.Product.AccountTypeCurrencyService;
import com.template.Service.Table.Product.AccountTypeNatureService;
import com.template.Service.Table.Product.AccountTypeService;
import com.template.Service.Table.Product.GlTestService;
import com.template.Service.Table.Tax.TaxService;

@Controller
@RequestMapping("AccountType")
public class AccountTypeContoller {

	@Autowired
	AccountTypeService accountTypeService;

	@Autowired
	AccInterestService accInterestService;

	@Autowired
	AccPeriodService accPeriodService;

	@Autowired
	AccCurrencyService accCurrencyService;

	@Autowired
	TaxService taxService;

	@Autowired
	IndCustomerNatureServices indCustomerNatureService;

	@Autowired
	AccIndDateUnitService accIndDateUnitService;
	
	@Autowired
	AccountTypeCurrencyService accountTypeCurrencyService;
	
	@Autowired
	AccountTypeNatureService accountTypeNatureService;

	@Autowired
	AccIndAccountTypeCategoriesService accIndAccountTypeCategoriesService;
	
	@Autowired
	IndFileTypeServices indFileTypeServices;

	@Value("${page.size}")
	int itemCountInPage;

	@GetMapping("/index")
	public String index( Model model, final RedirectAttributes redirectAttributes, @RequestParam(name = "page", required = false) Integer page
			, @RequestParam(name = "nameA", required = false) String nameA,
			@RequestParam(name = "nameB", required = false) String nameB,
			@RequestParam(name = "categoryId", required = false) Integer categoryId) throws Exception {
		
		String result;
		
		
		
		if(page==null)
			page=0;
		
		CResponse response=null;
		response = accIndAccountTypeCategoriesService.getAll();
		List<AccIndAccountTypeCategories> aTypeCategories = (List<AccIndAccountTypeCategories>) response.getReturnedObject();
		
		//set search criteria 
		SearchForAccountType searchCustomer = new SearchForAccountType();
		searchCustomer.setAccTypeName1A(nameA);
		searchCustomer.setAccTypeName1B(nameB);
		searchCustomer.setCategoryId(categoryId);
		
		//call stored function
		Page<SearchForAccountType> logAsPage1 = accountTypeService.getSearchAccountType(searchCustomer, (Pageable) PageRequest.of(page, itemCountInPage));
		
		long totalElements1 = logAsPage1.getTotalElements();
		Pageable newPageable1 = (Pageable) logAsPage1.getPageable();
		Page<SearchForAccountType> updatedLogAsPage1 = new PageImpl<>(logAsPage1.getContent(), newPageable1, totalElements1);
		
		//set the name of account category
		for(int i = 0; i < updatedLogAsPage1.getContent().size(); i++) {
			for(int j = 0; j < aTypeCategories.size(); j++){
				if(aTypeCategories.get(j).getId() == (long)updatedLogAsPage1.getContent().get(i).getCategoryId()){
					updatedLogAsPage1.getContent().get(i).setCategoryName(aTypeCategories.get(j).getNameA());
				}
			}
		}
		
		
		//to keep display search criteria
		model.addAttribute("nameA", nameA);
		model.addAttribute("nameB", nameB);
		model.addAttribute("categoryId", categoryId);
		
		model.addAttribute("allaccTypes", updatedLogAsPage1.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(updatedLogAsPage1));
		
		model.addAttribute("aTypeCategories", aTypeCategories);
		
		result = "/Products/index";
		return result;

	}

	
	@GetMapping("create")
	public String createOrUpdate(@RequestParam(value = "id", required = false) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		
		AccountType accountType;
		CResponse response=null;

		AccountTypeForm accountTypeForm = new AccountTypeForm();
		List<AccountTypeCurrency> accountTypeCurrencies = null;

		List<AccountTypeNature> accountTypeNatures = null;

		long accountTypCurrList = 0;

		long accountTypeTaxList = 0;

		long accountTypeCustomerNatureList = 0;

		if (id == null) {
			accountType = new AccountType();
			accountTypeForm.getAccountType().setNumberOfAccounts(1);

		} else {
			response=accountTypeService.findById(id);
			accountType = (AccountType)response.getReturnedObject();
						
			response = accountTypeCurrencyService.getAllAccountTypeCurrency(id);
			
			accountTypeCurrencies = (List<AccountTypeCurrency>) response.getReturnedObject();
			
			//accountTypeTaxs = accountTypeTaxService.getAllAccountTypeTax(id);

			response = accountTypeNatureService.getAllAccountTypeNature(id);
			accountTypeNatures = (List<AccountTypeNature>) response.getReturnedObject();

			accountTypCurrList = accountTypeCurrencies.size();

			accountTypeForm.setAccountTypeCurrencies(accountTypeCurrencies);

			//accountTypeTaxList = accountTypeTaxs.size();
			//accountTypeForm.setAccountTypeTaxs(accountTypeTaxs);

			accountTypeCustomerNatureList = accountTypeNatures.size();
			accountTypeForm.setAccountTypeNatures(accountTypeNatures);
			accountTypeForm.setAccountType(accountType);
		}

		response = accIndAccountTypeCategoriesService.getAll();
		List<AccIndAccountTypeCategories> aTypeCategories = (List<AccIndAccountTypeCategories>) response.getReturnedObject();
		
		response = accInterestService.getAllByType("credit interest");
		List<AccInterest> accCreditInterests = (List<AccInterest>) response.getReturnedObject();
		
		response = accInterestService.getAllByType("debit interest");
		List<AccInterest> accDebitInterests = (List<AccInterest>) response.getReturnedObject();
		
		response = accPeriodService.getAll(null);
		Page<AccPeriod> periodsPage =  (Page<AccPeriod>) response.getReturnedObject();
		List<AccPeriod> accPeriods =periodsPage.getContent();
		
		
		response = accountTypeService.getAllGeneralLedgers();
		
		List<GeneralLedger> generalLedgers = (List<GeneralLedger>) response.getReturnedObject(); 
		
		response =  accCurrencyService.getAll();
		List<AccCurrency> accCurrencies = (List<AccCurrency>) response.getReturnedObject();
		
		response = accIndDateUnitService.getAll(null);
		Page<AccIndDateUnit> accIndDateUnitsPage = (Page<AccIndDateUnit>) response.getReturnedObject();
		List<AccIndDateUnit> accIndDateUnits =accIndDateUnitsPage.getContent();

		
		response = taxService.findAll();
		List<Tax> accTaxs = (List<Tax>) response.getReturnedObject();
		
		response = indCustomerNatureService.getAllByType("COMPANY");
		List<IndCustomerNature> indCustomerNaturesComp = (List<IndCustomerNature>) response.getReturnedObject();
		
		response = indCustomerNatureService.getAllByType("INDIVIDUAL");
		List<IndCustomerNature> indCustomerNaturesInd = (List<IndCustomerNature>) response.getReturnedObject();
		
		response = indCustomerNatureService.getAll();
		List<IndCustomerNature> indCustomerNatures = (List<IndCustomerNature>) response.getReturnedObject();
		
		response = indFileTypeServices.getAll(); 
		List<IndFileType> indFileTypes = (List<IndFileType>) response.getReturnedObject();

		model.addAttribute("aTypeCategories", aTypeCategories);
		model.addAttribute("accCreditInterests", accCreditInterests);
		model.addAttribute("accDebitInterests", accDebitInterests);
		model.addAttribute("accPeriods", accPeriods);
		model.addAttribute("generalLedgers", generalLedgers);
		model.addAttribute("indFileTypes", indFileTypes);
		

		model.addAttribute("accCurrencies", accCurrencies);
		model.addAttribute("accTaxs", accTaxs);
		model.addAttribute("accIndDateUnits", accIndDateUnits);
		
		model.addAttribute("indCustomerNatures", indCustomerNatures);
		model.addAttribute("indCustomerNaturesInd", indCustomerNaturesInd);
		model.addAttribute("indCustomerNaturesComp", indCustomerNaturesComp);
		
		model.addAttribute("accountTypeForm", accountTypeForm);
		model.addAttribute("accountType", accountType);
		model.addAttribute("accountTypCurrList", accountTypCurrList);
		model.addAttribute("accountTypeTaxList", accountTypeTaxList);
		model.addAttribute("accountTypeCustomerNatureList", accountTypeCustomerNatureList);

		String result = "/Products/createAccountType";
		return result;
	}

	@PostMapping(value = "/save")
	public String save(@ModelAttribute("accountTypeForm") AccountTypeForm accountTypeForm,HttpServletRequest request,
			final RedirectAttributes redirectAttributes) throws Exception {

		CResponse response = null;
		
		CResponseDTO responseDTO = null;
		
		response = accountTypeService.save(accountTypeForm,request.getContextPath());
		
		responseDTO=new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if(response.isSuccess())
		{
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		}
		else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);	
		if(response.isSuccess())
			return "redirect:/AccountType/details?id=" + accountTypeForm.getAccountType().getId();
		else
			return "redirect:/AccountType/index";
		
	}
	
	

	@GetMapping("/details")
	public String details(@RequestParam(value = "id") Long id, Model model) {
		String result;

		CResponse responseDetail=null;
		responseDetail = accountTypeService.findById(id);
		AccountType accountType = (AccountType) responseDetail.getReturnedObject();
		AccountTypeForm accountTypeForm = new AccountTypeForm();
		accountTypeForm.setAccountType(accountType);

		if (accountType == null)
			throw new NoDataFoundException(" no accountType found with id :" + id);

		responseDetail = accountTypeCurrencyService.getAllAccountTypeCurrency(id);
		List<AccountTypeCurrency> accountTypeCurrencies = (List<AccountTypeCurrency>) responseDetail.getReturnedObject();
		//List<AccountTypeTax> accountTypeTaxs = accountTypeTaxService.getAllAccountTypeTax(id);
		responseDetail = accountTypeNatureService.getAllAccountTypeNature(id);
		List<AccountTypeNature> accountTypeNatures = (List<AccountTypeNature>) responseDetail.getReturnedObject();
		model.addAttribute("accountTypeForm", accountTypeForm);
		model.addAttribute("accountTypeCurrencies", accountTypeCurrencies);
		//model.addAttribute("accountTypeTaxs", accountTypeTaxs);
		model.addAttribute("accountTypeNatures", accountTypeNatures);

		result = "/Products/detailAccountType";
		return result;

	}
	
	// To toggle enable fag
		@GetMapping("/toggle")
		public String changeEnableFlag(@RequestParam(value = "id", required = true) Long id,
				@RequestParam(value = "enable", required = true) int enable, Model model,
				final RedirectAttributes redirectAttributes) throws Exception {
			String result;
			CResponse response = null;
			CResponseDTO responseDTO = new CResponseDTO();
			response = accountTypeService.changeEnableFlag(id, enable);
			responseDTO.setSuccess(response.isSuccess());
			if (response.isSuccess())
				responseDTO.setSuccessMessage(response.getSuccessMessage());
			else
				responseDTO.setErrorMessage(response.getErrorMessage());

			redirectAttributes.addFlashAttribute("response", responseDTO);
			result = "redirect:/AccountType/index";
			return result;
		}

	@ModelAttribute("title")
	public String pageTitle() {
		return "منتج الحساب";
	}

}
