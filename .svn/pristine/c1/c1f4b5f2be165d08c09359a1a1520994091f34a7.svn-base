package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;
import com.template.Repository.Table.AllIndexes.CustomerSituationRepository;

@Service
public class CustomerSituationServices {

	@Autowired
	CustomerSituationRepository customerSituationRepository;
	
	@Autowired
	CActionHandler actionHandler;

	
	
	


	
	public CResponse CustomerSituation(CustomerSituation customerSituation) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Customer_Situation.toString(), customerSituation);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Customer_Situation, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			customerSituation.setInsertBy(0);
			customerSituation.setIsDeleted(0);
			customerSituation.setInsertDate(new Date());
			customerSituationRepository.save(customerSituation);
			
			response.setReturnedObject(customerSituation);
		}
		while(false);
		
		return response;
	}
	
	public CustomerSituation updatecustomerSituation (CustomerSituation customerSituation) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(customerSituation.getId() == null) 
		{
			
			customerSituation.setInsertBy(0);
		}
		
		
		
		else if(customerSituation.getId() != null)
		{
			CustomerSituation temSocialStatus =customerSituationRepository.findById(customerSituation.getId()).get();
			customerSituation.setInsertDate(temSocialStatus.getInsertDate());
		}
		customerSituationRepository.save(customerSituation);
		return customerSituation;
	
	
	
	
	}
	
	
	public CustomerSituation findByNames(String nameA, String nameB) {
		return customerSituationRepository.findByNames(nameA, nameB);
	}

	
	public CustomerSituation save(CustomerSituation customerSituation) {
		if(customerSituation.getId() == null)
		{
			customerSituation.setInsertBy(0);
			customerSituation.setIsDeleted(0);
		}
		System.err.println(customerSituation);
		customerSituationRepository.save(customerSituation);
		return customerSituation;
	}
	
	public void update(CustomerSituation customerSituation) {
		customerSituationRepository.save(customerSituation);
	}
	
	public CustomerSituation findById(Long id) {
		return customerSituationRepository.getById(id);
	}
	
	public List<CustomerSituation> getAll(){
		List<CustomerSituation> all = customerSituationRepository.getAll();
		return all;
	}
	
	public List<CustomerSituation> getAllDeleted(){
		List<CustomerSituation> allDeleted = customerSituationRepository.getAllDeleted();
		return allDeleted;
	}

	public CustomerSituation delete(Long id) {
		CustomerSituation customerSituation = customerSituationRepository.findById(id).get();
		if (customerSituation == null) {
			throw new NoDataFoundException("indCity With ID : " + id + " Not Found");
		}
		customerSituation.setIsDeleted(1);
		return customerSituationRepository.save(customerSituation);
	}}
	
	