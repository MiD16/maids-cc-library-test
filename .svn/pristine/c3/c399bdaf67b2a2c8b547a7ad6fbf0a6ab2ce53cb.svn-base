


package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.*;

import com.template.Repository.Table.AllIndexes.IndCustomerMemberTypeRepository;
import com.template.Repository.Table.AllIndexes.IndCustDocumentRepository;
import com.template.Repository.Table.AllIndexes.IndCustomerMemberTypeRepository;


@Service
public class IndCustomerMemberTypeServices {

	@Autowired
	IndCustomerMemberTypeRepository indCustomerMemberTypeRepository;
	/////////////////////////
	
@Autowired CActionHandler actionHandler;
	
	public CResponse createIndCustomerMemberType(IndCustomerMemberType indCustomerMemberType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		do
		{
			response = new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			
			actionValidationParameters.addParameter(EKeyCode.Ind_Customer_Member_Type.toString(), indCustomerMemberType);
			
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_Ind_Customer_Type, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			indCustomerMemberType.setInsertBy(0);
			indCustomerMemberType.setIsDeleted(0);
			indCustomerMemberType.setInsertDate(new Date());
			indCustomerMemberTypeRepository.save(indCustomerMemberType);
			
			response.setReturnedObject(indCustomerMemberType);
		}
		while(false);
		
		return response;
	}
	
	public IndCustomerMemberType updateIndCustomerNatureKey (IndCustomerMemberType indCustomerMemberType) 
	{
		CResponse response = null;
		CActionValidationParameters actionValidationParameters = null;
		CActionValidationResult actionValidationResult = null;
		
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		actionValidationResult = new CActionValidationResult();
		
		if(indCustomerMemberType.getId() == null) 
		{
			
			indCustomerMemberType.setInsertBy(0);
		}
		
		
		
		else if(indCustomerMemberType.getId() != null)
		{
			IndCustomerMemberType temSocialStatus = indCustomerMemberTypeRepository.findById(indCustomerMemberType.getId()).get();
			indCustomerMemberType.setInsertDate(temSocialStatus.getInsertDate());
		}
		indCustomerMemberTypeRepository.save(indCustomerMemberType);
		return indCustomerMemberType;
	
	
	
	
	}
	
	
	
	
	
	
	
	
	public IndCustomerMemberType findByNames(String nameA, String nameB) {
		return indCustomerMemberTypeRepository.findByNames(nameA, nameB);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/////////////////////////////////
	
	public IndCustomerMemberType save(IndCustomerMemberType indCustomerMemberType) {
		if(indCustomerMemberType.getId() == null)
		{
			indCustomerMemberType.setInsertBy(0);
			indCustomerMemberType.setInsertDate(getCurrentDate());
			indCustomerMemberType.setIsDeleted(0);
		}else if(indCustomerMemberType.getId() != null){
			System.err.println(2121);
			indCustomerMemberType.setInsertDate(getCurrentDate());
			indCustomerMemberType.setLastUpdateDate(getCurrentDate());
			indCustomerMemberType.setLastUpdateBy(1);
		}
		indCustomerMemberTypeRepository.save(indCustomerMemberType);
		return indCustomerMemberType;
	}
	
	public void update(IndCustomerMemberType indCustomerMemberType) {
		indCustomerMemberTypeRepository.save(indCustomerMemberType);
	}
	
	public IndCustomerMemberType findById(Long id) {
		return indCustomerMemberTypeRepository.getById(id);
	}
	
	public List<IndCustomerMemberType> getAll(){
		List<IndCustomerMemberType> all = indCustomerMemberTypeRepository.getAll();
		return all;
	}
	
	public List<IndCustomerMemberType> getAllDeleted(){
		List<IndCustomerMemberType> allDeleted = indCustomerMemberTypeRepository.getAllDeleted();
		return allDeleted;
	}

	public IndCustomerMemberType delete(Long id) {
		IndCustomerMemberType indCustomerMemberType = indCustomerMemberTypeRepository.findById(id).get();
		if (indCustomerMemberType == null) {
			throw new NoDataFoundException("indCustomerMemberType With ID : " + id + " Not Found");
		}
		indCustomerMemberType.setIsDeleted(1);
		return indCustomerMemberTypeRepository.save(indCustomerMemberType);
	}
	
	private static java.sql.Date getCurrentDate() {
		java.util.Date today = new java.util.Date();
		return new java.sql.Date(today.getTime());
	}}
	
	
	

