package com.template.util;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class TokenUtiles {
	

    @Value("${auth.expiration}")
    private Long TOKEN_VALIDITY;

    @Value("${auth.secret}")
    private String TOKEN_SECRET;

    public String tokenGenerate(UserDetails userDetails){
        //claims
        //expreation
        //sign
        //compact

        Map<String,Object> claims=new HashMap<>();
        claims.put("sub",userDetails.getUsername());
        claims.put("created", new Date());

        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(generateExpiration())
                .signWith(SignatureAlgorithm.HS512,TOKEN_SECRET)
                .compact();

    }


    private Date generateExpiration(){
        return new Date(System.currentTimeMillis()+TOKEN_VALIDITY*1000);
    }

    public boolean isTokenValid(String token,UserDetails userDetails){
        String username=getUsernameFromToken(token);
        return (username.equals(userDetails.getUsername()) &&!isTokenExpired(token));
    }

    public boolean isTokenExpired(String token){

        Date expiration=getClaims(token).getExpiration();
        return expiration.before(new Date());
    }

    private Claims getClaims(String token) {
        Claims claims;
        try {
            claims = Jwts.parser().setSigningKey(TOKEN_SECRET)
                    .parseClaimsJws(token)
                    .getBody();
        }catch (Exception ex) {
            claims = null;
        }

        return claims;
    }


    public String getUsernameFromToken(String token){
        Claims claims=getClaims(token);
        if(claims!=null){
            return claims.getSubject();
        }else {
            return null;
        }
    }

}
