package com.template.Service.Table.AllIndexes;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Exception.NoDataFoundException;
import com.template.Model.Table.AllIndexes.IndPosition;
import com.template.Model.Table.AllIndexes.IndRegion;
import com.template.Model.Table.AllIndexes.IndSignatureType;
import com.template.Model.Table.AllIndexes.IndSocialStatus;
import com.template.Repository.Table.AllIndexes.IndPositionRepository;
import com.template.Repository.Table.AllIndexes.IndSignatureTypeRepository;
@Service
public class IndPositionServices {

@Autowired
IndPositionRepository indPositionRepository;
@Autowired CActionHandler actionHandler;

public CResponse createSocialStatus(IndPosition indPosition) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	do
	{
		response = new CResponse();
		actionValidationParameters = new CActionValidationParameters();
		
		actionValidationParameters.addParameter(EKeyCode.Ind_Position.toString(), indPosition);
		
		actionValidationResult = actionHandler.validate(CActionConstant.CREATE_IND_POSITION, actionValidationParameters);
		
		if(!actionValidationResult.isValid())
		{
			response.setSuccess(false);
			response.setErrorMessage(actionValidationResult.getErrorMessage());
			break;
		}
		
		indPosition.setInsertBy(0);
		indPosition.setInsertDate(new Date());
		indPositionRepository.save(indPosition);
		
		response.setReturnedObject(indPosition);
	}
	while(false);
	
	return response;
}

public IndPosition updateSocialStatus(IndPosition indPosition) 
{
	CResponse response = null;
	CActionValidationParameters actionValidationParameters = null;
	CActionValidationResult actionValidationResult = null;
	
	response = new CResponse();
	actionValidationParameters = new CActionValidationParameters();
	actionValidationResult = new CActionValidationResult();
	
	if(indPosition.getId() == null) 
	{
		
		indPosition.setInsertBy(0);
	}
	
	
	
	else if(indPosition.getId() != null)
	{
		IndPosition temSocialStatus = indPositionRepository.findById(indPosition.getId()).get();
		indPosition.setInsertDate(temSocialStatus.getInsertDate());
	}
	indPositionRepository.save(indPosition);
	return indPosition;
}





public IndPosition findByNames(String nameA, String nameB) {
	return indPositionRepository.findByNames(nameA, nameB);
}

public IndPosition save(IndPosition indPosition) {
	if(indPosition.getId() == null)
	{
		indPosition.setInsertBy(0);
	}else if(indPosition.getId() != null){
		IndPosition temSignatureType=indPositionRepository.findById(indPosition.getId()).get();
		indPosition.setInsertDate(temSignatureType.getInsertDate());
	}
	indPositionRepository.save(indPosition);
	return indPosition;
}


public void update(IndPosition indPosition) {
	indPositionRepository.save(indPosition);
}

public IndPosition findById(Long id) {
	return indPositionRepository.getById(id);
}

public List<IndPosition> getAll(){
	List<IndPosition> all = indPositionRepository.getAll();
	return all;
}

public List<IndPosition> getAllDeleted(){
	List<IndPosition> allDeleted = indPositionRepository.getAllDeleted();
	return allDeleted;
}

public IndPosition delete(Long id) {
	IndPosition indPosition = indPositionRepository.findById(id).get();
	if (indPosition == null) {
		throw new NoDataFoundException("indSignatureType With ID : " + id + " Not Found");
	}
	indPosition.setIsDeleted(1);
	return indPositionRepository.save(indPosition);
}
}