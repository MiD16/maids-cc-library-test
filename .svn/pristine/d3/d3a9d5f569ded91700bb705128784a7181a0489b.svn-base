package com.template.Controller.Basic.SystemLog;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.Base.Class.CResponse;
import com.template.Class.Pageing.PageInfo;
import com.template.Service.Basic.SystemLog.ExceptionLogActionService;
import com.template.Model.Basic.SystemLog.ExceptionLogAction;
import com.template.Model.Basic.SystemLog.ModifyLog;

@RequestMapping("ExceptionLog")
@Controller
@ControllerAdvice(assignableTypes = {ExceptionLogActionController.class})

public class ExceptionLogActionController {


	@Autowired
	public ExceptionLogActionService exceptionLogActionService;
	@Value("${page.size}")
	int itemCountInPage;
	
	
//	//@PreAuthorize("hasPermission('log', 'logaction_index')")
//	@GetMapping("/log/logaction/index")
//	public String indexLogAction(Model model, final RedirectAttributes redirectAttributes,@RequestParam(name = "page", required = false) Integer page) {
//		String result;
//		if(page== null)
//			page = 0;
//		Page<LogAction> logactionPage = logActionRep.findAll(PageRequest.of(page,itemCountInPage));
//		logActionService.addLogAction("log_logaction_index", "");
//		model.addAttribute("logactionList", logactionPage.getContent());
//		model.addAttribute("pageInfo", PageInfo.getPageInfo(logactionPage));
//		result = "/log/index";
//		return result;
//	}
//	@GetMapping("/logaction/search")
//	public String searchget(Model model) {
//		String result;
//		model.addAttribute("user", userRep.getAllUsers());
//		model.addAttribute("action", actionsRep.findAll());
//		model.addAttribute("log", new LogActionSearchCriteria());
//		result = "/log/search";
//		return result;
//	}
//	
//	@PostMapping("/logaction/search")
//	public String searchpost(@RequestParam(name = "page", required = false) Integer page,
//			@ModelAttribute("log") LogActionSearchCriteria p, Model model, HttpServletRequest request) {
//		String result;
//		if (p.getUser_id() != 0 || p.getAction_id() != 0 || p.getDate_from() != null || p.getDate_to() != null
//				|| p.getDescription() != null) {
//			List<Log_Actions_view> searchResult = null;
//			String date_from = "", date_to = "", value = "";
//			if (!p.getDate_from().isEmpty())
//				date_from = p.getDate_from();
//			if (!p.getDate_to().isEmpty())
//				date_to = p.getDate_to();
//			if (!p.getDescription().isEmpty())
//				value = p.getDescription();
//			if(page == null)
//				page=1;
//			searchResult = log_Actions_viewRep.searchlogs(p.getUser_id(), p.getAction_id(), date_from, date_to, value, page-1,
//					20);
//			if (searchResult.size() != 0) {
//				int lastPage = searchResult.get(0).getTotal_count() ;
//				model.addAttribute("page", page);
//				model.addAttribute("allsize", lastPage);
//				model.addAttribute("lastPage", lastPage);
//				model.addAttribute("searchResult", searchResult);
//				model.addAttribute("size", 20);
//			}
//				model.addAttribute("log", p);
//			}
//		model.addAttribute("user", userRep.getAllUsers());
//		model.addAttribute("action", actionsRep.findAll());
//		result = "/log/search";
//		return result;
//	}

	
	@GetMapping("/index")
	public String index(Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result;
		CResponse response = new CResponse();
		if (page == null)
			page = 0;
		response = exceptionLogActionService.getAllExceptionLogAction(PageRequest.of(page, itemCountInPage));
		Page<ExceptionLogAction> sysPage = (Page<ExceptionLogAction>) response.getReturnedObject();
		model.addAttribute("exclogaction", sysPage.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(sysPage));
		result = "/SystemLog/indexExceptionLogAction";
		return result;
	}
	@GetMapping("/details")
	public String details(@RequestParam(value = "id", required = true) Long id, Model model,
			final RedirectAttributes redirectAttributes) {
		String result;
		CResponse response = new CResponse();
		response = exceptionLogActionService.findById(id);
		ExceptionLogAction exceptionLogAction =  (ExceptionLogAction) response.getReturnedObject();
		
		model.addAttribute("exceptionLogAction", exceptionLogAction);
		result = "/SystemLog/detailsExceptionLogAction";
		return result;
	}
	@ModelAttribute("title")
	public String pageTitle() {
		return "سجل الأخطاء";
	}
}

