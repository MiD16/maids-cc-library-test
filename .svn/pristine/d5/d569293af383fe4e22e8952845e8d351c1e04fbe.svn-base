package com.template.Controller.Basic;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.Base.Class.CResponse;
import com.Base.DTO.CResponseDTO;
import com.template.Class.Pageing.PageInfo;
import com.template.Model.Basic.Role;
import com.template.Model.Basic.RoleAction;
import com.template.Model.Basic.User;
import com.template.Model.View.RoleActionOpposite;
import com.template.Service.Basic.ActionService;
//import com.template.Service.Basic.LogService;
import com.template.Service.Basic.RoleActionService;
import com.template.Service.Basic.RoleService;
import com.template.Service.Basic.UserActionService;
import com.template.Service.Basic.UserRoleService;
import com.template.Service.Basic.UserService;

@Controller
@ControllerAdvice(assignableTypes = { RoleActionController.class })
@RequestMapping("roleaction")
public class RoleActionController {
//	@Autowired
//	public LogService logActionService;
	@Autowired
	RoleService roleService;
	@Autowired
	UserRoleService userRoleService;
	@Autowired
	UserActionService userActionService;
	@Autowired
	ActionService actionService;
	@Autowired
	UserService userService;
	@Autowired
	RoleActionService roleActionService;
	@Value("${page.size}")
	int itemCountInPage;

//	@PreAuthorize("hasPermission('action', 'index_by_role')")
	@GetMapping("/index")
	public String index(@RequestParam(value = "id") int id, Model model, final RedirectAttributes redirectAttributes,
			@RequestParam(name = "page", required = false) Integer page) {
		String result = null;
		CResponse response = null;
		Page<RoleAction> roleactionPage = null;
		List<RoleActionOpposite> roleActionOppositeList = null;
		Page<User> userAsPage = null;
		Role role = null;
		if (page == null)
			page = 0;
		response = new CResponse();
		response = roleActionService.getRoleActionByRoleId(id, PageRequest.of(page, itemCountInPage));
		roleactionPage = (Page<RoleAction>) response.getReturnedObject();
		response = roleActionService.findRoleactionOppositeByRoleId(id);
		roleActionOppositeList = (List<RoleActionOpposite>) response.getReturnedObject();
		model.addAttribute("roleActionOppositeList", roleActionOppositeList);
		response = roleService.findRoleById(id);
		role = (Role) response.getReturnedObject();
		response = userService.getAllUsersAsPage(PageRequest.of(page, itemCountInPage));
		userAsPage = (Page<User>) response.getReturnedObject();
		model.addAttribute("role", role);
		model.addAttribute("roleactionList", roleactionPage.getContent());
		model.addAttribute("pageInfo", PageInfo.getPageInfo(roleactionPage));
		result = "/role/roleaction-index";
		return result;
	}

//	@PreAuthorize("hasPermission('action', 'add')")
	@PostMapping("/create")
	public String create(@RequestParam(value = "role_id") int role_id, @RequestParam(value = "action_id") int action_id,
			Model model, final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		// save action for role
		
		response = roleActionService.create(role_id, action_id);
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		
		result = "redirect:/roleaction/index?id=" + role_id;
		return result;
	}

//	@PreAuthorize("hasPermission('action', 'delete')")
	@GetMapping("/delete")
	public String deleteActionFromRole(@RequestParam(value = "id") int id, Model model,
			final RedirectAttributes redirectAttributes) throws Exception {
		String result;
		CResponse response = null;
		CResponseDTO responseDTO = null;
		// save action for role
		response = roleActionService.delete(id);
		responseDTO = new CResponseDTO();
		responseDTO.setSuccess(response.isSuccess());
		if (response.isSuccess()) {
			responseDTO.setSuccessMessage(response.getSuccessMessage());
		} else {
			responseDTO.setErrorMessage(response.getErrorMessage());
		}
		redirectAttributes.addFlashAttribute("response", responseDTO);
		result = "redirect:/roleaction/index?id=" + (((RoleAction) response.getReturnedObject()).getRole().getID());
		return result;
	}

	@ModelAttribute("title")
	public String pageTitle() {
		return "الأدوار والصلاحيات";
	}
}
