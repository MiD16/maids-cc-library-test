package com.Base.Component;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import com.Base.Helper.GeneralHelper;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class CTokenUtility {
	

    @Value("${auth.expiration}")
    private Long TOKEN_VALIDITY;

    @Value("${auth.secret}")
    private String SECRET_KEY;

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        
        claims.put("sub",userDetails.getUsername());
        claims.put("created", new Date());
        
        return createToken(claims, userDetails.getUsername());
    }
    
    public Boolean validateToken(String token, String username) 
    {
        final String extractedUsername = extractUsername(token);
        return (extractedUsername.equals(username) && !isTokenExpired(token));
    }
    
    public boolean isTokenExpired(String token){

        Date expiration=getClaims(token).getExpiration();
        return expiration.before(new Date());
    }
    
    public String extractUsername(String token)
    {
        Claims claims=getClaims(token);
        if(claims!=null){
            return claims.getSubject();
        }else {
            return null;
        }
    }
    
    private String createToken(Map<String, Object> claims, String subject)
    {
        return Jwts.builder()
        		.setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(generateExpiration())
                .signWith(SignatureAlgorithm.HS512, GeneralHelper.FromBase64String(SECRET_KEY))
                .compact();
    }
    
    
    private Date generateExpiration(){
        return new Date(System.currentTimeMillis() + 1000 * 60 * TOKEN_VALIDITY);
    }
    
    private Claims getClaims(String token) {
        Claims claims;
        try {
            claims = Jwts.parser().setSigningKey(GeneralHelper.FromBase64String(SECRET_KEY))
                    .parseClaimsJws(token)
                    .getBody();
        }catch (Exception ex) {
            claims = null;
        }

        return claims;
    }

}
