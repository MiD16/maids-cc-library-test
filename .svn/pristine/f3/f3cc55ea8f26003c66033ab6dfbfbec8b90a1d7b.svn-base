package com.template.BusinessRule.AccountType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Interface.IBusinessRule;
import com.template.BusinessRule.CBusinessRuleConstant;
import com.template.Enum.EErrorCode;
import com.template.Enum.EKeyCode;
import com.template.Model.Table.Products.AccPeriod;
import com.template.Model.Table.Products.AccountType;
import com.template.Service.Table.Product.AccPeriodService;
import com.template.Service.Table.Product.AccountTypeService;

@Component(CBusinessRuleConstant.ACCOUNT_TYPE_PERIOD_IS_NOT_DELETED)
@Lazy
public class CBRAccountTypePeriodIsNotDeleted implements IBusinessRule {

	@Autowired
	AccPeriodService accPeriodService;
	
	

	public CActionValidationResult validate(CActionValidationParameters parameters) {
		CActionValidationResult actionValidationResult = null;
		AccPeriod accPeriodPermission = null;
		AccPeriod accPeriodInterest = null;
		AccPeriod accPeriodMaturity = null;
		AccPeriod accPeriodRenwal = null;
		
		
		try {
			do {
				actionValidationResult = new CActionValidationResult();
				
				accPeriodPermission = (AccPeriod) parameters.getParameter(EKeyCode.PERMISSON_PERIOD.toString());
				accPeriodInterest = (AccPeriod) parameters.getParameter(EKeyCode.INTEREST_PERIOD.toString());
				accPeriodMaturity = (AccPeriod) parameters.getParameter(EKeyCode.MATURITY_PERIOD.toString());
				accPeriodRenwal = (AccPeriod) parameters.getParameter(EKeyCode.RENWAL_PERIOD.toString());
				
				if(accPeriodPermission!=null)
					if (accPeriodService.checkPeriodIsDeleted(accPeriodPermission.getId())) {
						actionValidationResult.setValid(false);
						actionValidationResult.setErrorMessage(" فترة السماح  محذوفة");
						actionValidationResult.setErrorCode(EErrorCode.PERIOD_IS_DELETED.toString());
				}
				
				if(accPeriodInterest!=null)
					if (accPeriodService.checkPeriodIsDeleted(accPeriodInterest.getId())) {
						actionValidationResult.setValid(false);
						actionValidationResult.setErrorMessage(" فترة  استحقاق الفوائد محذوفة");
						actionValidationResult.setErrorCode(EErrorCode.PERIOD_IS_DELETED.toString());
				}
				
				if(accPeriodMaturity!=null)
					if (accPeriodService.checkPeriodIsDeleted(accPeriodMaturity.getId())) {
						actionValidationResult.setValid(false);
						actionValidationResult.setErrorMessage(" الفترة الزمنية لبدء احتساب الفوائد للوديعة  محذوفة");
						actionValidationResult.setErrorCode(EErrorCode.PERIOD_IS_DELETED.toString());
				}
				
				if(accPeriodRenwal!=null)
					if (accPeriodService.checkPeriodIsDeleted(accPeriodRenwal.getId())) {
						actionValidationResult.setValid(false);
						actionValidationResult.setErrorMessage(" مدة ربط الوديعة محذوفة");
						actionValidationResult.setErrorCode(EErrorCode.PERIOD_IS_DELETED.toString());
						
				}
				
			} while (false);
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}

		return actionValidationResult;
	}

}
