
package com.template.Service.Basic;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import com.Base.Class.CActionHandler;
import com.Base.Class.CActionValidationParameters;
import com.Base.Class.CActionValidationResult;
import com.Base.Class.CResponse;
import com.template.Action.CActionConstant;
import com.template.Enum.EKeyCode;
import com.template.Model.Basic.Action;
import com.template.Model.Basic.Role;
import com.template.Model.Basic.RoleAction;
import com.template.Model.Basic.User;
import com.template.Model.Basic.UserAction;
import com.template.Model.Basic.UserRole;
import com.template.Repository.Basic.ActionsRep;
import com.template.Repository.Basic.RoleRep;
import com.template.Repository.Basic.UserActionRep;
import com.template.Repository.Basic.UsersRep;
import com.template.Repository.View.UserActionOppsiteRep;
@Service
public class UserActionService {
	

	@Autowired
	private UserActionRep userActionRep;
	@Autowired
	private	UserActionOppsiteRep userActionOppositeRep;
	@Autowired
	private ActionsRep actionsRep;
	@Autowired
	private RoleRep roleRep;
	@Autowired
	private UsersRep userRep;
	@Lazy
	@Autowired
	private UserService userService;
	@Autowired CActionHandler actionHandler;
	public CResponse getUserActionByUserId(int id,PageRequest pageRequest) {
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(userActionRep.getUserActionByUserId(id,pageRequest));
		return response;

	
	}
	public CResponse getUserActionByID(int id) {
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject( userActionRep.findById(id).get());
		return response;
	}
	public CResponse getUserActionByUserId(int id) {
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(userActionRep.getUserActionByUserId(id));
		return response;
		}
	
	public CResponse getUserActionByRoleId(int id) {
		
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(userActionRep.getUserActionByRoleId(id));
		return response;
	
	}
	public CResponse getUserActionByActionId(int id) {
		
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(userActionRep.getUserActionByActionId(id));
		return response;
	
	}
	
	
	
	public CResponse getUserActionByActionIdandRoleId(int id,int roleid) {

		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject( userActionRep.getUserActionByActionIdandRoleId(id,roleid));
		return response;
	
	}
	
public CResponse findUserActionOppositeByRoleId(int id) {
		CResponse response = null;	
		response= new CResponse();
		response.setReturnedObject(userActionOppositeRep.getActionByUserID(id));
		return response;
		
	}
public CResponse create(int userId , int actionId, Integer role_id)  throws Exception
{
	CResponse response = null;	
	CActionValidationParameters actionValidationParameters  = null;
	CActionValidationResult actionValidationResult = null;
	UserAction userAction = null;
	Role role = null;
	User user = null;
	Action action = null;
	
	try
	{
		do
		{
			response= new CResponse();
			
			if(role_id != null)
				role = roleRep.findById(role_id).get();
			
			user = userRep.findById(userId).get();
			
			action = actionsRep.findById(actionId).get();
			
			if(user == null)
			{
				response.setSuccess(false);
				response.setErrorMessage("NULL OBJECT");
				break;
			}
			
			userAction = createUserAction(user, role, action, null);
			
			actionValidationParameters = new CActionValidationParameters();
			actionValidationParameters.addParameter(EKeyCode.USER.toString(), user);
			actionValidationResult = actionHandler.validate(CActionConstant.CREATE_USER_ACTION, actionValidationParameters);
			
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
		
			userActionRep.save(userAction);	
			
			response.setSuccessMessage("تم إضافة صلاحية للمستخدم  بنجاح");
		}
		while(false);
	} 
	catch (Exception e) 
	{
		throw e;
	}
	
	return response;
}

public UserAction createUserAction(User user, Role role, Action action, UserRole userRole )
throws Exception{
	UserAction userAction = new UserAction();
	userAction.setUser(user);
	userAction.setAction(action);
	userAction.setRole(role);
	userAction.setUserrole_id(userRole == null ? 0 : userRole.getID());
	userAction.setIs_deleted(0);
	userAction.setInsertDate(new Date());
	userAction.setInsertBy(userService.getAuthenticatedUser().getID());
	return userAction;
}
public List<UserAction> savelistUserAction(List<UserAction> userActions )
throws Exception{
	return userActionRep.saveAll(userActions);
}

public CResponse delete(int id)  throws Exception
{
	CResponse response = null;	
	CActionValidationParameters actionValidationParameters  = null;
	CActionValidationResult actionValidationResult = null;
	UserAction useraction = userActionRep.findById(id).get();
	try
	{
		do
		{
			response= new CResponse();
			actionValidationParameters = new CActionValidationParameters();
			actionValidationParameters.addParameter(EKeyCode.USERACTION.toString(), useraction);
			actionValidationParameters.addParameter(EKeyCode.USER.toString(), useraction.getUser());
		
			actionValidationResult = actionHandler.validate(CActionConstant.DELETE_USER_ACTION, actionValidationParameters);
			if(!actionValidationResult.isValid())
			{
				response.setSuccess(false);
				response.setErrorMessage(actionValidationResult.getErrorMessage());
				break;
			}
			
			useraction.setIs_deleted(1);
			userActionRep.save(useraction);
		     response.setReturnedObject(useraction);
			response.setSuccessMessage("تم حذف صلاحية المستخدم  بنجاح");
		}
		while(false);
	} 
	catch (Exception e) 
	{
		throw e;
	}
	
	return response;
}
public void delete_with_userrole(int id,List<UserAction> userAction) throws Exception{

		for(int j=0;j<userAction.size();j++)
		{
			if(id==userAction.get(j).getUserrole_id())
			{
				userAction.get(j).setIs_deleted(1);
				userAction.get(j).setDeletedBy(userService.getAuthenticatedUser().getID());
				userAction.get(j).setDeletedDate(new Date());
				
			}
		}
	
	userActionRep.saveAll(userAction);

	
}
public boolean check_role_is_linked_with_user_action (Role role) {
	List<UserAction> userActions;
	CResponse response=null;
	response = new CResponse();
	response= getUserActionByRoleId(role.getID());
	userActions=(List<UserAction>) response.getReturnedObject();


	if(!userActions.isEmpty())
	{
		return true;	}

	return false;

}

public boolean check_user_is_linked_with_user_action (User user) {
	List<UserAction> userActions;
	CResponse response=null;
	response = new CResponse();
	response= getUserActionByUserId(user.getID());
	userActions=(List<UserAction>) response.getReturnedObject();


	if(!userActions.isEmpty())
	{
		return true;	}

	return false;

}

public boolean check_user_action_is_deleted (UserAction useraction) {
	CResponse response=null;
	response = new CResponse();
	UserAction latestUseraction = null;
	response= getUserActionByID(useraction.getID());
	latestUseraction=(UserAction) response.getReturnedObject();
	if(latestUseraction.getIs_deleted() == 1)
	{
	return true;
	}

	return false;

}


}
